groupVersion(group: "core", version: "v1") {
    /// ComponentStatus (and ComponentStatusList) holds the cluster validation info.
    @deprecated(msg: "TODO", since: "1.19")
    kind ComponentStatus {

        /// List of component conditions observed
        conditions: optional list-map(value: Condition, keys: [.type]),

        /// Information about the condition of a component.
        struct Condition {

            /// Type of condition for a component. Valid value: "Healthy"
            type: Type,

            /// Status of the condition for a component. Valid values for "Healthy": "True", "False", or "Unknown".
            status: ConditionStatus,

            /// Message about the condition for a component. For example, information about a health check.
            message: optional string,

            /// Condition error code for a component. For example, a health check error code.
            error: optional string,

            /// Type and constants for component health validation.
            enum Type {
                Healthy
            }
        }
    }

    /// ConfigMap holds configuration data for pods to consume.
    kind ConfigMap {

        /// Immutable, if set to true, ensures that data stored in the ConfigMap cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is a beta field enabled by ImmutableEphemeralVolumes feature gate.
        immutable: optional bool,

        /// Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.
        data: optional simple-map(key: string, value: string),

        /// BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.
        binaryData: optional simple-map(key: string, value: bytes),
    }

    /// Endpoints is a collection of endpoints that implement the actual service. Example:   Name: "mysvc",   Subsets: [     {       Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],       Ports: [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]     },     {       Addresses: [{"ip": "10.10.3.3"}],       Ports: [{"name": "a", "port": 93}, {"name": "b", "port": 76}]     },  ]
    kind Endpoints {

        /// The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.
        subsets: optional list(value: Subset),

        /// EndpointSubset is a group of addresses with a common set of ports. The expanded set of endpoints is the Cartesian product of Addresses x Ports. For example, given:   {     Addresses: [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],     Ports:     [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]   } The resulting set of endpoints can be viewed as:     a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],     b: [ 10.10.1.1:309, 10.10.2.2:309 ]
        struct Subset {

            /// IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.
            addresses: optional list(value: Address),

            /// IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.
            notReadyAddresses: optional list(value: Address),

            /// Port numbers available on the related IP addresses.
            ports: optional list(value: Port),

            /// EndpointAddress is a tuple that describes single IP address.
            struct Address {

                /// The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready. TODO: This should allow hostname or IP, See #4447.
                @go::name(name: "IP")
                ip: string,

                /// The Hostname of this endpoint
                hostname: optional string,

                /// Optional: Node hosting this endpoint. This can be used to determine endpoints local to a node.
                nodeName: optional string,

                /// Reference to object providing the endpoint.
                targetRef: optional ObjectReference,
            }

            /// EndpointPort is a tuple that describes a single port.
            struct Port {

                /// The name of this port.  This must match the 'name' field in the corresponding ServicePort. Must be a DNS_LABEL. Optional only if one port is defined.
                name: optional string,

                /// The port number of the endpoint.
                port: int32,

                /// The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.
                protocol: optional Protocol,

                /// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                appProtocol: optional string,
            }
        }

    }

    /// A list of ephemeral containers used with the Pod ephemeralcontainers subresource.
    kind EphemeralContainers {

        /// A list of ephemeral containers associated with this pod. New ephemeral containers may be appended to this list, but existing ephemeral containers may not be removed or modified.
        ephemeralContainers: list-map(value: Pod::Spec::EphemeralContainer, keys: [.name]),
    }

    /// Event is a report of an event somewhere in the cluster.  Events have a limited retention time and triggers and messages may evolve with time.  Event consumers should not rely on the timing of an event with a given Reason reflecting a consistent underlying trigger, or the continued existence of events with that Reason.  Events should be treated as informative, best-effort, supplemental data.
    kind Event {

        /// The object that this event is about.
        involvedObject: ObjectReference,

        /// This should be a short, machine understandable string that gives the reason for the transition into the object's current status. TODO: provide exact specification for format.
        reason: optional string,

        /// A human-readable description of the status of this operation. TODO: decide on maximum length.
        message: optional string,

        /// The component reporting this event. Should be a short machine understandable string.
        source: optional Source,

        /// The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)
        firstTimestamp: optional time,

        /// The time at which the most recent occurrence of this event was recorded.
        lastTimestamp: optional time,

        /// The number of times this event has occurred.
        count: optional int32,

        /// Type of this event (Normal, Warning), new types could be added in the future
        type: optional string,

        /// Time when this Event was first observed.
        eventTime: optional time,

        /// Data about the Event series this event represents or nil if it's a singleton Event.
        series: optional Series,

        /// What action was taken/failed regarding to the Regarding object.
        action: optional string,

        /// Optional secondary object for more complex actions.
        related: optional ObjectReference,

        /// Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.
        @go::name(name: "ReportingController")
        reportingComponent: optional string,

        /// ID of the controller instance, e.g. `kubelet-xyzf`.
        reportingInstance: optional string,

        /// EventSource contains information for an event.
        struct Source {

            /// Component from which the event is generated.
            component: optional string,

            /// Node name on which the event is generated.
            host: optional string,
        }

        /// EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.
        struct Series {

            /// Number of occurrences in this series up to the last heartbeat time
            count: optional int32,

            /// Time of the last occurrence observed
            lastObservedTime: optional time,
        }
    }

    /// LimitRange sets resource usage limits for each kind of resource in a Namespace.
    kind LimitRange {

        /// Spec defines the limits enforced. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        spec: optional Spec,

        /// LimitRangeSpec defines a min/max usage limit for resources that match on kind.
        struct Spec {

            /// Limits is the list of LimitRangeItem objects that are enforced.
            limits: list(value: Item),

            /// LimitRangeItem defines a min/max usage limit for any resource that matches on kind.
            struct Item {

                /// Type of resource that this limit applies to.
                type: LimitType,

                /// Max usage constraints on this kind by resource name.
                max: optional ResourceList,

                /// Min usage constraints on this kind by resource name.
                min: optional ResourceList,

                /// Default resource requirement limit value by resource name if resource limit is omitted.
                default: optional ResourceList,

                /// DefaultRequest is the default resource requirement request value by resource name if resource request is omitted.
                defaultRequest: optional ResourceList,

                /// MaxLimitRequestRatio if specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.
                maxLimitRequestRatio: optional ResourceList,

                /// LimitType is a type of object that is limited
                enum LimitType {
                    Pod, Container, PersistentVolumeClaim
                }
            }
        }
    }

    /// Namespace provides a scope for Names. Use of multiple namespaces is optional.
    kind Namespace {

        /// Spec defines the behavior of the Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        spec: optional Spec,

        /// Status describes the current status of a Namespace. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status: optional Status,

        /// NamespaceSpec describes the attributes on a Namespace.
        struct Spec {

            /// Finalizers is an opaque list of values that must be empty to permanently remove object from storage. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
            finalizers: optional list(value: FinalizerName),

            /// FinalizerName is the name identifying a finalizer during namespace lifecycle.
            newtype FinalizerName: string
        }

        /// NamespaceStatus is information about the current status of a Namespace.
        struct Status {

            /// Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/
            phase: optional Phase,
            enum Phase {
                Active, Terminating
            }

            /// Represents the latest available observations of a namespace's current state.
            conditions: optional list-map(value: Condition, keys: [.type]),

            /// NamespaceCondition contains details about state of namespace.
            struct Condition {

                /// Type of namespace controller condition.
                type: Type,

                /// Status of the condition, one of True, False, Unknown.
                status: ConditionStatus,
                lastTransitionTime: optional time,
                reason: optional string,
                message: optional string,

                enum Type {
                    NamespaceDeletionDiscoveryFailure,
                    NamespaceDeletionContentFailure,
                    NamespaceDeletionGroupVersionParsingFailure,
                    NamespaceContentRemaining,
                    NamespaceFinalizersRemaining
                }
            }
        }
    }

    /// Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).
    kind Node {

        /// Spec defines the behavior of a node. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        spec: optional Spec,

        /// Most recently observed status of the node. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status: optional Status,

        /// NodeConfigSource specifies a source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.
        struct ConfigSource {

            /// ConfigMap is a reference to a Node's ConfigMap
            configMap: optional ConfigMapNodeConfigSource,

            /// ConfigMapNodeConfigSource contains the information to reference a ConfigMap as a config source for the Node.
            struct ConfigMapNodeConfigSource {

                /// Namespace is the metadata.namespace of the referenced ConfigMap. This field is required in all cases.
                namespace: string,

                /// Name is the metadata.name of the referenced ConfigMap. This field is required in all cases.
                name: string,

                /// UID is the metadata.UID of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
                @go::name(name: "UID")
                uid: optional __types/__v1::UID, // TODO: this lives in an unversioned package currently.  It should move elsewhere

                /// ResourceVersion is the metadata.ResourceVersion of the referenced ConfigMap. This field is forbidden in Node.Spec, and required in Node.Status.
                resourceVersion: optional string,

                /// KubeletConfigKey declares which key of the referenced ConfigMap corresponds to the KubeletConfiguration structure This field is required in all cases.
                kubeletConfigKey: string,
            }
        }

        /// NodeSpec describes the attributes that a node is created with.
        struct Spec {

            /// PodCIDR represents the pod IP range assigned to the node.
            podCIDR: optional string,

            /// podCIDRs represents the IP ranges assigned to the node for usage by Pods on that node. If this field is specified, the 0th entry must match the podCIDR field. It may contain at most 1 value for each of IPv4 and IPv6.
            podCIDRs: optional set(value: string),

            /// ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>
            providerID: optional string,

            /// Unschedulable controls node schedulability of new pods. By default, node is schedulable. More info: https://kubernetes.io/docs/concepts/nodes/node/#manual-node-administration
            unschedulable: optional bool,

            /// If specified, the node's taints.
            taints: optional list(value: Taint),

            /// If specified, the source to get node configuration from The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field
            configSource: optional ConfigSource,

            /// Deprecated. Not all kubelets will set this field. Remove field after 1.13. see: https://issues.k8s.io/61966
            @go::name(name: "DoNotUseExternalID")
            externalID: optional string,

            /// The node this Taint is attached to has the "effect" on any pod that does not tolerate the Taint.
            struct Taint {

                /// Required. The taint key to be applied to a node.
                key: string,

                /// The taint value corresponding to the taint key.
                value: optional string,

                /// Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.
                effect: TaintEffect,

                /// TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints.
                timeAdded: optional time,
            }
        }

        /// NodeStatus is information about the current status of a node.
        struct Status {

            /// Capacity represents the total resources of a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
            capacity: optional ResourceList,

            /// Allocatable represents the resources of a node that are available for scheduling. Defaults to Capacity.
            allocatable: optional ResourceList,

            /// NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase.
            @deprecated(msg: "this field is never populated")
            phase: optional Phase,
            enum Phase {
                Pending, Running, Terminated
            }

            /// Conditions is an array of current observed node conditions. More info: https://kubernetes.io/docs/concepts/nodes/node/#condition
            conditions: optional list-map(value: Condition, keys: [.type]),

            /// List of addresses reachable to the node. Queried from cloud provider, if available. More info: https://kubernetes.io/docs/concepts/nodes/node/#addresses Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch. See http://pr.k8s.io/79391 for an example.
            addresses: optional list-map(value: Address, keys: [.type]),

            /// Endpoints of daemons running on the Node.
            daemonEndpoints: optional DaemonEndpoints,

            /// Set of ids/uuids to uniquely identify the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#info
            nodeInfo: optional SystemInfo,

            /// List of container images on this node
            images: optional list(value: ContainerImage),

            /// List of attachable volumes in use (mounted) by the node.
            volumesInUse: optional list(value: UniqueVolumeName),

            /// List of volumes that are attached to the node.
            volumesAttached: optional list(value: AttachedVolume),

            /// Status of the config assigned to the node via the dynamic Kubelet config feature.
            config: optional ConfigStatus,

            /// NodeAddress contains information for the node's address.
            struct Address {

                // Author's note: example of out-of-date enum comment

                /// Node address type, one of Hostname, ExternalIP or InternalIP.
                type: Type,
                enum Type {
                    Hostname,
                    ExternalIP, InternalIP,
                    ExternalDNS, InternalDNS,
                }

                /// The node address.
                address: string,
            }

            /// AttachedVolume describes a volume attached to a node
            struct AttachedVolume {

                /// Name of the attached volume
                name: UniqueVolumeName,

                /// DevicePath represents the device path where the volume should be available
                devicePath: string,
            }
            newtype UniqueVolumeName: string

            /// NodeCondition contains condition information for a node.
            struct Condition {

                /// Type of node condition.
                type: Type,
                enum Type {
                    Ready,
                    MemoryPressure, DiskPressure, PIDPressure,
                    NetworkUnavailable,
                }

                /// Status of the condition, one of True, False, Unknown.
                status: ConditionStatus,

                /// Last time we got an update on a given condition.
                lastHeartbeatTime: optional time,

                /// Last time the condition transit from one status to another.
                lastTransitionTime: optional time,

                /// (brief) reason for the condition's last transition.
                reason: optional string,

                /// Human readable message indicating details about last transition.
                message: optional string,
            }

            /// NodeConfigStatus describes the status of the config assigned by Node.Spec.ConfigSource.
            struct ConfigStatus {

                /// Assigned reports the checkpointed config the node will try to use. When Node.Spec.ConfigSource is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in Assigned. Assigned only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the Assigned config the Active config by loading and validating the checkpointed payload identified by Assigned.
                assigned: optional ConfigSource,

                /// Active reports the checkpointed config the node is actively using. Active will represent either the current version of the Assigned config, or the current LastKnownGood config, depending on whether attempting to use the Assigned config results in an error.
                active: optional ConfigSource,

                /// LastKnownGood reports the checkpointed config the node will fall back to when it encounters an error attempting to use the Assigned config. The Assigned config becomes the LastKnownGood config when the node determines that the Assigned config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of Assigned config is updated. If the Assigned config is Active at the end of this period, it becomes the LastKnownGood. Note that if Spec.ConfigSource is reset to nil (use local defaults), the LastKnownGood is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future.
                lastKnownGood: optional ConfigSource,

                /// Error describes any problems reconciling the Spec.ConfigSource to the Active config. Errors may occur, for example, attempting to checkpoint Spec.ConfigSource to the local Assigned record, attempting to checkpoint the payload associated with Spec.ConfigSource, attempting to load or validate the Assigned config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to LastKnownGood, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to LastKnownGood. In the latter case, it is usually possible to resolve the error by fixing the config assigned in Spec.ConfigSource. You can find additional information for debugging by searching the error message in the Kubelet log. Error is a human-readable description of the error state; machines can check whether or not Error is empty, but should not rely on the stability of the Error text across Kubelet versions.
                error: optional string,
            }

            /// Describe a container image
            struct ContainerImage {

                /// Names by which this image is known. e.g. ["k8s.gcr.io/hyperkube:v1.0.7", "dockerhub.io/google_containers/hyperkube:v1.0.7"]
                names: list(value: string),

                /// The size of the image in bytes.
                sizeBytes: optional int64,
            }

            /// NodeDaemonEndpoints lists ports opened by daemons running on the Node.
            struct DaemonEndpoints {

                /// Endpoint on which Kubelet is listening.
                kubeletEndpoint: optional DaemonEndpoint,

                /// DaemonEndpoint contains information about a single Daemon endpoint.
                struct DaemonEndpoint {

                    /// Port number of the given endpoint.
                    Port: int32,
                }
            }

            /// NodeSystemInfo is a set of ids/uuids to uniquely identify the node.
            struct SystemInfo {

                /// MachineID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id: http://man7.org/linux/man-pages/man5/machine-id.5.html
                machineID: string,

                /// SystemUUID reported by the node. For unique machine identification MachineID is preferred. This field is specific to Red Hat hosts https://access.redhat.com/documentation/en-us/red_hat_subscription_management/1/html/rhsm/uuid
                systemUUID: string,

                /// Boot ID reported by the node.
                bootID: string,

                /// Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).
                kernelVersion: string,

                /// OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).
                @go::name(name: "OSImage")
                osImage: string,

                /// ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).
                containerRuntimeVersion: string,

                /// Kubelet Version reported by the node.
                kubeletVersion: string,

                /// KubeProxy Version reported by the node.
                kubeProxyVersion: string,

                /// The Operating System reported by the node
                operatingSystem: string,

                /// The Architecture reported by the node
                architecture: string,
            }
        }
    }

    /// PersistentVolume (PV) is a storage resource provisioned by an administrator. It is analogous to a node. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes
    kind PersistentVolume {

        /// Spec defines a specification of a persistent volume owned by the cluster. Provisioned by an administrator. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
        spec: optional Spec,

        /// Status represents the current information/status for the persistent volume. Populated by the system. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistent-volumes
        status: optional Status,
        
        /// PersistentVolumeSpec is the specification of a persistent volume.
        struct Spec {

            /// A description of the persistent volume's resources and capacity. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#capacity
            capacity: optional ResourceList,

            /// The actual volume backing the persistent volume.
            _inline: Source,

            /// AccessModes contains all ways the volume can be mounted. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes
            accessModes: optional list(value: AccessMode),
            enum AccessMode {
                ReadWriteOnce, ReadOnlyMany, ReadWriteMany
            }

            /// ClaimRef is part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.VolumeName is the authoritative bind between PV and PVC. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#binding
            claimRef: optional ObjectReference,

            /// What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming
            persistentVolumeReclaimPolicy: optional ReclaimPolicy,

            /// Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.
            storageClassName: optional string,

            /// A list of mount options, e.g. ["ro", "soft"]. Not validated - mount will simply fail if one is invalid. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes/#mount-options
            mountOptions: optional list(value: string),

            /// volumeMode defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. Value of Filesystem is implied when not included in spec.
            volumeMode: optional Mode,
            enum Mode {
                Block, Filesystem
            }

            /// NodeAffinity defines constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume.
            nodeAffinity: optional VolumeNodeAffinity,

            /// PersistentVolumeReclaimPolicy describes a policy for end-of-life maintenance of persistent volumes.
            enum ReclaimPolicy {
                @deprecated(msg: "TODO")
                Recycle,

                Delete, Retain
            }

            /// PersistentVolumeSource is similar to VolumeSource but meant for the administrator who creates PVs. Exactly one of its members must be set.
            struct Source {

                /// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                @go::name(name: "GCEPersistentDisk")
                gcePersistentDisk: optional GCEPersistentDiskVolumeSource,

                /// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                @go::name(name: "AWSElasticBlockStore")
                awsElasticBlockStore: optional AWSElasticBlockStoreVolumeSource,

                /// HostPath represents a directory on the host. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
                hostPath: optional HostPathVolumeSource,

                /// Glusterfs represents a Glusterfs volume that is attached to a host and exposed to the pod. Provisioned by an admin. More info: https://examples.k8s.io/volumes/glusterfs/README.md
                glusterfs: optional GlusterfsPersistentVolumeSource,

                /// NFS represents an NFS mount on the host. Provisioned by an admin. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                @go::name(name: "NFS")
                nfs: optional NFSVolumeSource,

                /// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
                @go::name(name: "RBD")
                rbd: optional RBDPersistentVolumeSource,

                /// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. Provisioned by an admin.
                @go::name(name: "ISCSI")
                iscsi: optional ISCSIPersistentVolumeSource,

                /// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                cinder: optional CinderPersistentVolumeSource,

                /// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                @go::name(name: "CephFS")
                cephfs: optional CephFSPersistentVolumeSource,

                /// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                @go::name(name: "FC")
                fc: optional FCVolumeSource,

                /// Flocker represents a Flocker volume attached to a kubelet's host machine and exposed to the pod for its usage. This depends on the Flocker control service being running
                flocker: optional FlockerVolumeSource,

                /// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
                flexVolume: optional FlexPersistentVolumeSource,

                /// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
                azureFile: optional AzureFilePersistentVolumeSource,

                /// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                vsphereVolume: optional VsphereVirtualDiskVolumeSource,

                /// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                quobyte: optional QuobyteVolumeSource,

                /// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                azureDisk: optional AzureDiskVolumeSource,

                /// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                photonPersistentDisk: optional PhotonPersistentDiskVolumeSource,

                /// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
                portworxVolume: optional PortworxVolumeSource,

                /// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                scaleIO: optional ScaleIOPersistentVolumeSource,

                /// Local represents directly-attached storage with node affinity
                local: optional LocalVolumeSource,

                /// StorageOS represents a StorageOS volume that is attached to the kubelet's host machine and mounted into the pod More info: https://examples.k8s.io/volumes/storageos/README.md
                @go::name(name: "StorageOS")
                storageos: optional StorageOSPersistentVolumeSource,

                /// CSI represents storage that is handled by an external CSI driver (Beta feature).
                @go::name(name: "CSI")
                csi: optional CSIPersistentVolumeSource,

                /// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
                struct AzureFilePersistentVolumeSource {

                    /// the name of secret that contains Azure Storage Account Name and Key
                    secretName: string,

                    /// Share Name
                    shareName: string,

                    /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                    readOnly: optional bool,

                    /// the namespace of the secret that contains Azure Storage Account Name and Key default is the same as the Pod
                    secretNamespace: optional string,
                }

                /// Represents storage that is managed by an external CSI volume driver (Beta feature)
                struct CSIPersistentVolumeSource {

                    /// Driver is the name of the driver to use for this volume. Required.
                    driver: string,

                    /// VolumeHandle is the unique volume name returned by the CSI volume plugin’s CreateVolume to refer to the volume on all subsequent calls. Required.
                    volumeHandle: string,

                    /// Optional: The value to pass to ControllerPublishVolumeRequest. Defaults to false (read/write).
                    readOnly: optional bool,

                    /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs".
                    @go::name(name: "FSType")
                    fsType: optional string,

                    /// Attributes of the volume to publish.
                    volumeAttributes: optional simple-map(key: string, value: string),

                    /// ControllerPublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerPublishVolume and ControllerUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                    controllerPublishSecretRef: optional SecretReference,

                    /// NodeStageSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodeStageVolume and NodeStageVolume and NodeUnstageVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                    nodeStageSecretRef: optional SecretReference,

                    /// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                    nodePublishSecretRef: optional SecretReference,

                    /// ControllerExpandSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI ControllerExpandVolume call. This is an alpha field and requires enabling ExpandCSIVolumes feature gate. This field is optional, and may be empty if no secret is required. If the secret object contains more than one secret, all secrets are passed.
                    controllerExpandSecretRef: optional SecretReference,
                }

                /// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
                struct CephFSPersistentVolumeSource {

                    /// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    monitors: list(value: string),

                    /// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                    path: optional string,

                    /// Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    user: optional string,

                    /// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    secretFile: optional string,

                    /// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    secretRef: optional SecretReference,

                    /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                    readOnly: optional bool,
                }

                /// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
                struct CinderPersistentVolumeSource {

                    /// volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                    volumeID: string,

                    /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                    @go::name(name: "FSType")
                    fsType: optional string,

                    /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                    readOnly: optional bool,

                    /// Optional: points to a secret object containing parameters used to connect to OpenStack.
                    secretRef: optional SecretReference,
                }

                /// FlexPersistentVolumeSource represents a generic persistent volume resource that is provisioned/attached using an exec based plugin.
                struct FlexPersistentVolumeSource {

                    /// Driver is the name of the driver to use for this volume.
                    driver: string,

                    /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                    @go::name(name: "FSType")
                    fsType: optional string,

                    /// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
                    secretRef: optional SecretReference,

                    /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                    readOnly: optional bool,

                    /// Optional: Extra command options if any.
                    options: optional simple-map(key: string, value: string),
                }

                /// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
                struct GlusterfsPersistentVolumeSource {

                    /// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                    @go::name(name: "EndpointsName")
                    endpoints: string,

                    /// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                    path: string,

                    /// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                    readOnly: optional bool,

                    /// EndpointsNamespace is the namespace that contains Glusterfs endpoint. If this field is empty, the EndpointNamespace defaults to the same namespace as the bound PVC. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                    endpointsNamespace: optional string,
                }

                /// ISCSIPersistentVolumeSource represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
                struct ISCSIPersistentVolumeSource {

                    /// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                    targetPortal: string,

                    /// Target iSCSI Qualified Name.
                    @go::name(name: "IQN")
                    iqn: string,

                    /// iSCSI Target Lun number.
                    lun: int32,

                    /// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
                    @go::name(name: "ISCSIInterface")
                    iscsiInterface: optional string,

                    /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
                    @go::name(name: "FSType")
                    fsType: optional string,

                    /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
                    readOnly: optional bool,

                    /// iSCSI Target Portal List. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                    portals: optional list(value: string),

                    /// whether support iSCSI Discovery CHAP authentication
                    @go::name(name: "DiscoveryCHAPAuth")
                    chapAuthDiscovery: optional bool,

                    /// whether support iSCSI Session CHAP authentication
                    @go::name(name: "SessionCHAPAuth")
                    chapAuthSession: optional bool,

                    /// CHAP Secret for iSCSI target and initiator authentication
                    secretRef: optional SecretReference,

                    /// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
                    initiatorName: optional string,
                }

                /// Local represents directly-attached storage with node affinity (Beta feature)
                struct LocalVolumeSource {

                    /// The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...).
                    path: string,

                    /// Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default value is to auto-select a fileystem if unspecified.
                    @go::name(name: "FSType")
                    fsType: optional string,
                }

                /// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
                struct RBDPersistentVolumeSource {

                    /// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    @go::name(name: "CephMonitors")
                    monitors: list(value: string),

                    /// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    @go::name(name: "RBDImage")
                    image: string,

                    /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
                    @go::name(name: "FSType")
                    fsType: optional string,

                    /// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    @go::name(name: "RBDPool")
                    pool: optional string,

                    /// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    @go::name(name: "RadosUser")
                    user: optional string,

                    /// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    keyring: optional string,

                    /// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    secretRef: optional SecretReference,

                    /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                    readOnly: optional bool,
                }

                /// ScaleIOPersistentVolumeSource represents a persistent ScaleIO volume
                struct ScaleIOPersistentVolumeSource {

                    /// The host address of the ScaleIO API Gateway.
                    gateway: string,

                    /// The name of the storage system as configured in ScaleIO.
                    system: string,

                    /// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
                    secretRef: SecretReference,

                    /// Flag to enable/disable SSL communication with Gateway, default false
                    @go::name(name: "SSLEnabled")
                    sslEnabled: optional bool,

                    /// The name of the ScaleIO Protection Domain for the configured storage.
                    protectionDomain: optional string,

                    /// The ScaleIO Storage Pool associated with the protection domain.
                    storagePool: optional string,

                    /// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
                    storageMode: optional string,

                    /// The name of a volume already created in the ScaleIO system that is associated with this volume source.
                    volumeName: optional string,

                    /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs"
                    @go::name(name: "FSType")
                    fsType: optional string,

                    /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                    readOnly: optional bool,
                }

                /// SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace
                struct SecretReference {

                    /// Name is unique within a namespace to reference a secret resource.
                    name: optional string,

                    /// Namespace defines the space within which the secret name must be unique.
                    namespace: optional string,
                }

                /// Represents a StorageOS persistent volume resource.
                struct StorageOSPersistentVolumeSource {

                    /// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
                    volumeName: optional string,

                    /// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
                    volumeNamespace: optional string,

                    /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                    @go::name(name: "FSType")
                    fsType: optional string,

                    /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                    readOnly: optional bool,

                    /// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
                    secretRef: optional ObjectReference,
                }
            }

            /// VolumeNodeAffinity defines constraints that limit what nodes this volume can be accessed from.
            struct VolumeNodeAffinity {

                /// Required specifies hard node constraints that must be met.
                required: optional Pod::Spec::NodeSelector,
            }
        }

        /// PersistentVolumeStatus is the current status of a persistent volume.
        struct Status {

            /// Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase
            phase: optional Phase,
            enum Phase {
                Pending, Available, Bound, Released, Failed
            }

            /// A human-readable message indicating details about why the volume is in this state.
            message: optional string,

            /// Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.
            reason: optional string,
        }
    }

    /// PersistentVolumeClaim is a user's request for and claim to a persistent volume
    kind PersistentVolumeClaim {

        /// Spec defines the desired characteristics of a volume requested by a pod author. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        spec: optional Spec,

        /// Status represents the current information/status of a persistent volume claim. Read-only. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
        status: optional Status,

        /// PersistentVolumeClaimStatus is the current status of a persistent volume claim.
        struct Status {

            /// Phase represents the current phase of PersistentVolumeClaim.
            phase: optional Phase,
            enum Phase {
                Pending, Bound, Lost
            }

            /// AccessModes contains the actual access modes the volume backing the PVC has. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
            accessModes: optional list(value: PersistentVolume::Spec::AccessMode),

            /// Represents the actual resources of the underlying volume.
            capacity: optional ResourceList,

            /// Current Condition of persistent volume claim. If underlying persistent volume is being resized then the Condition will be set to 'ResizeStarted'.
            conditions: optional list-map(value: Condition, keys: [.type]),

            /// PersistentVolumeClaimCondition contails details about state of pvc
            struct Condition {
                type: Type,
                enum Type {
                    Resizing, FileSystemResizePending
                }

                status: ConditionStatus,

                /// Last time we probed the condition.
                lastProbeTime: optional time,

                /// Last time the condition transitioned from one status to another.
                lastTransitionTime: optional time,

                /// Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports "ResizeStarted" that means the underlying persistent volume is being resized.
                reason: optional string,

                /// Human-readable message indicating details about last transition.
                message: optional string,

                /// PersistentVolumeClaimConditionType is a valid value of PersistentVolumeClaimCondition.Type
            }
        }

        /// PersistentVolumeClaimSpec describes the common attributes of storage devices and allows a Source for provider-specific attributes
        struct Spec {

            /// AccessModes contains the desired access modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1
            accessModes: optional list(value: PersistentVolume::Spec::AccessMode),

            /// A label query over volumes to consider for binding.
            selector: optional meta.k8s.io/v1::LabelSelector,

            /// Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources
            resources: optional ResourceRequirements,

            /// VolumeName is the binding reference to the PersistentVolume backing this claim.
            volumeName: optional string,

            /// Name of the StorageClass required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1
            storageClassName: optional string,

            /// volumeMode defines what type of volume is required by the claim. Value of Filesystem is implied when not included in claim spec.
            volumeMode: optional PersistentVolume::Spec::Mode,

            /// This field can be used to specify either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot) * An existing PVC (PersistentVolumeClaim) * An existing custom resource that implements data population (Alpha) In order to use custom resource types that implement data population, the AnyVolumeDataSource feature gate must be enabled. If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.
            dataSource: optional TypedLocalObjectReference,

            /// TypedLocalObjectReference contains enough information to let you locate the typed referenced object inside the same namespace.
            struct TypedLocalObjectReference {

                /// APIGroup is the group for the resource being referenced. If APIGroup is not specified, the specified Kind must be in the core API group. For any other third-party types, APIGroup is required.
                @go::name(name: "APIGroup")
                apiGroup: optional string,

                /// Kind is the type of resource being referenced
                kind: string,

                /// Name is the name of resource being referenced
                name: string,
            }
        }
    }

    /// Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto hosts.
    kind Pod {

        /// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        spec: optional Spec,

        /// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status: optional Status,

        /// PodConditionType is a valid value for PodCondition.Type
        enum ConditionType {
            ContainersReady, Initialized, Ready, PodScheduled
        }

        /// Pod::Spec is a description of a pod.
        struct Spec {

            /// List of volumes that can be mounted by containers belonging to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes
            volumes: optional list-map(value: Volume, keys: [.name]),

            /// List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. The name for an init container or normal container must be unique among all containers. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resourceRequirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. Init containers cannot currently be added or removed. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/init-containers/
            initContainers: optional list-map(value: Container, keys: [.name]),

            /// List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.
            containers: list-map(value: Container, keys: [.name]),

            /// List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.
            ephemeralContainers: optional list-map(value: EphemeralContainer, keys: [.name]),

            /// Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy
            restartPolicy: optional RestartPolicy,

            /// Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process. Defaults to 30 seconds.
            terminationGracePeriodSeconds: optional int64,

            /// Optional duration in seconds the pod may be active on the node relative to StartTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive integer.
            activeDeadlineSeconds: optional int64,

            /// Set DNS policy for the pod. Defaults to "ClusterFirst". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.
            @go::name(name: "DNSPolicy")
            dnsPolicy: optional DNSPolicy,

            /// NodeSelector is a selector which must be true for the pod to fit on a node. Selector which must match a node's labels for the pod to be scheduled on that node. More info: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
            nodeSelector: optional simple-map(key: string, value: string),

            /// ServiceAccountName is the name of the ServiceAccount to use to run this pod. More info: https://kubernetes.io/docs/tasks/configure-pod-container/configure-service-account/
            serviceAccountName: optional string,

            /// DeprecatedServiceAccount is a depreciated alias for ServiceAccountName. Deprecated: Use serviceAccountName instead.
            @go::name(name: "DeprecatedServiceAccount")
            serviceAccount: optional string,

            /// AutomountServiceAccountToken indicates whether a service account token should be automatically mounted.
            automountServiceAccountToken: optional bool,

            /// NodeName is a request to schedule this pod onto a specific node. If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements.
            nodeName: optional string,

            /// Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified. Default to false.
            hostNetwork: optional bool,

            /// Use the host's pid namespace. Optional: Default to false.
            hostPID: optional bool,

            /// Use the host's ipc namespace. Optional: Default to false.
            hostIPC: optional bool,

            /// Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. HostPID and ShareProcessNamespace cannot both be set. Optional: Default to false.
            shareProcessNamespace: optional bool,

            /// SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field.
            securityContext: optional PodSecurityContext,

            /// ImagePullSecrets is an optional list of references to secrets in the same namespace to use for pulling any of the images used by this Pod::Spec. If specified, these secrets will be passed to individual puller implementations for them to use. For example, in the case of docker, only DockerConfig type secrets are honored. More info: https://kubernetes.io/docs/concepts/containers/images#specifying-imagepullsecrets-on-a-pod
            imagePullSecrets: optional list-map(value: LocalObjectReference, keys: [.name]),

            /// Specifies the hostname of the Pod If not specified, the pod's hostname will be set to a system-defined value.
            hostname: optional string,

            /// If specified, the fully qualified Pod hostname will be "<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>". If not specified, the pod will not have a domainname at all.
            subdomain: optional string,

            /// If specified, the pod's scheduling constraints
            affinity: optional Affinity,

            /// If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.
            schedulerName: optional string,

            /// If specified, the pod's tolerations.
            tolerations: optional list(value: Toleration),

            /// HostAliases is an optional list of hosts and IPs that will be injected into the pod's hosts file if specified. This is only valid for non-hostNetwork pods.
            hostAliases: optional list-map(value: HostAlias, keys: [.ip]),

            /// If specified, indicates the pod's priority. "system-node-critical" and "system-cluster-critical" are two special keywords which indicate the highest priorities with the former being the highest priority. Any other name must be defined by creating a PriorityClass object with that name. If not specified, the pod priority will be default or zero if there is no default.
            priorityClassName: optional string,

            /// The priority value. Various system components use this field to find the priority of the pod. When Priority Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.
            priority: optional int32,

            /// Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on DNSPolicy.
            @go::name(name: "DNSConfig")
            dnsConfig: optional PodDNSConfig,

            /// If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to "True" More info: https://git.k8s.io/enhancements/keps/sig-network/0007-pod-ready%2B%2B.md
            readinessGates: optional list(value: PodReadinessGate),

            /// RuntimeClassName refers to a RuntimeClass object in the node.k8s.io group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the "legacy" RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. More info: https://git.k8s.io/enhancements/keps/sig-node/runtime-class.md This is a beta feature as of Kubernetes v1.14.
            runtimeClassName: optional string,

            /// EnableServiceLinks indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links. Optional: Defaults to true.
            enableServiceLinks: optional bool,

            /// PreemptionPolicy is the Policy for preempting pods with lower priority. One of Never, PreemptLowerPriority. Defaults to PreemptLowerPriority if unset. This field is beta-level, gated by the NonPreemptingPriority feature-gate.
            preemptionPolicy: optional PreemptionPolicy,

            /// Overhead represents the resource overhead associated with running a pod for a given RuntimeClass. This field will be autopopulated at admission time by the RuntimeClass admission controller. If the RuntimeClass admission controller is enabled, overhead must not be set in Pod create requests. The RuntimeClass admission controller will reject Pod create requests which have the overhead already set. If RuntimeClass is configured and selected in the Pod::Spec, Overhead will be set to the value defined in the corresponding RuntimeClass, otherwise it will remain unset and treated as zero. More info: https://git.k8s.io/enhancements/keps/sig-node/20190226-pod-overhead.md This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the PodOverhead feature.
            overhead: optional ResourceList,

            /// TopologySpreadConstraints describes how a group of pods ought to spread across topology domains. Scheduler will schedule pods in a way which abides by the constraints. All topologySpreadConstraints are ANDed.
            topologySpreadConstraints: optional list-map(value: TopologySpreadConstraint, keys: [.topologyKey, .whenUnsatisfiable]),

            /// If true the pod's hostname will be configured as the pod's FQDN, rather than the leaf name (the default). In Linux containers, this means setting the FQDN in the hostname field of the kernel (the nodename field of struct utsname). In Windows containers, this means setting the registry value of hostname for the registry key HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters to FQDN. If a pod does not have FQDN, this has no effect. Default to false.
            setHostnameAsFQDN: optional bool,

            /// Affinity is a group of affinity scheduling rules.
            struct Affinity {

                /// Describes node affinity scheduling rules for the pod.
                nodeAffinity: optional NodeAffinity,

                /// Describes pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s)).
                podAffinity: optional PodAffinity,

                /// Describes pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s)).
                podAntiAffinity: optional PodAntiAffinity,

                /// Node affinity is a group of node affinity scheduling rules.
                struct NodeAffinity {

                    /// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node.
                    requiredDuringSchedulingIgnoredDuringExecution: optional NodeSelector,

                    /// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.
                    preferredDuringSchedulingIgnoredDuringExecution: optional list(value: PreferredSchedulingTerm),

                    /// A node selector represents the union of the results of one or more label queries over a set of nodes; that is, it represents the OR of the selectors represented by the node selector terms.
                    struct NodeSelector {

                        /// Required. A list of node selector terms. The terms are ORed.
                        nodeSelectorTerms: list(value: NodeSelectorTerm),

                        /// A null or empty node selector term matches no objects. The requirements of them are ANDed. The TopologySelectorTerm type implements a subset of the NodeSelectorTerm.
                        struct Term {

                            /// A list of node selector requirements by node's labels.
                            matchExpressions: optional list(value: NodeSelectorRequirement),

                            /// A list of node selector requirements by node's fields.
                            matchFields: optional list(value: NodeSelectorRequirement),

                            /// A node selector requirement is a selector that contains values, a key, and an operator that relates the key and values.
                            struct NodeSelectorRequirement {

                                /// The label key that the selector applies to.
                                key: string,

                                /// Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.
                                operator: NodeSelectorOperator,

                                /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. If the operator is Gt or Lt, the values array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.
                                values: optional list(value: string),

                                /// A node selector operator is the set of operators that can be used in a node selector requirement.
                                enum NodeSelectorOperator {
                                    In, NotIn, Exists, DoesNotExist, Gt, Lt
                                }
                            }
                        }
                    }

                    /// An empty preferred scheduling term matches all objects with implicit weight 0 (i.e. it's a no-op). A null preferred scheduling term matches no objects (i.e. is also a no-op).
                    struct PreferredSchedulingTerm {

                        /// Weight associated with matching the corresponding nodeSelectorTerm, in the range 1-100.
                        weight: int32,

                        /// A node selector term, associated with the corresponding weight.
                        preference: NodeSelector::Term,
                    }
                }

                /// Pod affinity is a group of inter pod affinity scheduling rules.
                struct PodAffinity {

                    /// If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                    requiredDuringSchedulingIgnoredDuringExecution: optional list(value: PodAffinityTerm),

                    /// The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                    preferredDuringSchedulingIgnoredDuringExecution: optional list(value: WeightedPodAffinityTerm),
                }

                /// Defines a set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running
                struct PodAffinityTerm {

                    /// A label query over a set of resources, in this case pods.
                    labelSelector: optional meta.k8s.io/v1::LabelSelector,

                    /// namespaces specifies which namespaces the labelSelector applies to (matches against); null or empty list means "this pod's namespace"
                    namespaces: optional list(value: string),

                    /// This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.
                    topologyKey: string,
                }

                /// Pod anti affinity is a group of inter pod anti affinity scheduling rules.
                struct PodAntiAffinity {

                    /// If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.
                    requiredDuringSchedulingIgnoredDuringExecution: optional list(value: PodAffinityTerm),

                    /// The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding "weight" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.
                    preferredDuringSchedulingIgnoredDuringExecution: optional list(value: WeightedPodAffinityTerm),
                }

                /// The weights of all of the matched WeightedPodAffinityTerm fields are added per-node to find the most preferred node(s)
                struct WeightedPodAffinityTerm {

                    /// weight associated with matching the corresponding podAffinityTerm, in the range 1-100.
                    weight: int32,

                    /// Required. A pod affinity term, associated with the corresponding weight.
                    podAffinityTerm: PodAffinityTerm,
                }
            }

            /// A single application container that you want to run within a pod.
            struct Container {

                /// Name of the container specified as a DNS_LABEL. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.
                name: string,

                /// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images This field is optional to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.
                image: optional string,

                /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                command: optional list(value: string),

                /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                args: optional list(value: string),

                /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
                workingDir: optional string,

                /// List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default "0.0.0.0" address inside a container will be accessible from the network. Cannot be updated.
                ports: optional list-map(value: ContainerPort, keys: [.containerPort, .protocol]),

                /// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
                envFrom: optional list(value: EnvFromSource),

                /// List of environment variables to set in the container. Cannot be updated.
                env: optional list-map(value: EnvVar, keys: [.name]),

                /// Compute Resources required by this container. Cannot be updated. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
                resources: optional ResourceRequirements,

                /// Pod volumes to mount into the container's filesystem. Cannot be updated.
                volumeMounts: optional list-map(value: VolumeMount, keys: [.mountPath]),

                /// volumeDevices is the list of block devices to be used by the container.
                volumeDevices: optional list-map(value: VolumeDevice, keys: [.devicePath]),

                /// Periodic probe of container liveness. Container will be restarted if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                livenessProbe: optional Probe,

                /// Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. Cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                readinessProbe: optional Probe,

                /// StartupProbe indicates that the Pod has successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the livenessProbe failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be updated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                startupProbe: optional Probe,

                /// Actions that the management system should take in response to container lifecycle events. Cannot be updated.
                lifecycle: optional Lifecycle,

                /// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
                terminationMessagePath: optional string,

                /// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
                terminationMessagePolicy: optional TerminationMessagePolicy,

                /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
                imagePullPolicy: optional PullPolicy,

                /// Security options the pod should run with. More info: https://kubernetes.io/docs/concepts/policy/security-context/ More info: https://kubernetes.io/docs/tasks/configure-pod-container/security-context/
                securityContext: optional SecurityContext,

                /// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
                stdin: optional bool,

                /// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
                stdinOnce: optional bool,

                /// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
                @go::name(name: "TTY")
                tty: optional bool,
            }

            /// ContainerPort represents a network port in a single container.
            struct ContainerPort {

                /// If specified, this must be an IANA_SVC_NAME and unique within the pod. Each named port in a pod must have a unique name. Name for the port that can be referred to by services.
                name: optional string,

                /// Number of port to expose on the host. If specified, this must be a valid port number, 0 < x < 65536. If HostNetwork is specified, this must match ContainerPort. Most containers do not need this.
                hostPort: optional int32,

                /// Number of port to expose on the pod's IP address. This must be a valid port number, 0 < x < 65536.
                containerPort: int32,

                /// Protocol for port. Must be UDP, TCP, or SCTP. Defaults to "TCP".
                protocol: optional Protocol,

                /// What host IP to bind the external port to.
                hostIP: optional string,
            }

            /// DNSPolicy defines how a pod's DNS will be configured.
            enum DNSPolicy {
                ClusterFirstWithoutHostNet,
                ClusterFirst,
                Default,
                None
            }

            /// EnvFromSource represents the source of a set of ConfigMaps
            struct EnvFromSource {

                /// An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.
                prefix: optional string,

                /// The ConfigMap to select from
                configMapRef: optional ConfigMapEnvSource,

                /// The Secret to select from
                secretRef: optional SecretEnvSource,

                /// ConfigMapEnvSource selects a ConfigMap to populate the environment variables with.
                ///  The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.
                struct ConfigMapEnvSource {

                    /// The ConfigMap to select from.
                    _inline: LocalObjectReference,

                    /// Specify whether the ConfigMap must be defined
                    optional: optional bool,
                }

                /// SecretEnvSource selects a Secret to populate the environment variables with.
                ///  The contents of the target Secret's Data field will represent the key-value pairs as environment variables.
                struct SecretEnvSource {

                    /// The Secret to select from.
                    _inline: LocalObjectReference,

                    /// Specify whether the Secret must be defined
                    optional: optional bool,
                }
            }

            /// EnvVar represents an environment variable present in a Container.
            struct EnvVar {

                /// Name of the environment variable. Must be a C_IDENTIFIER.
                name: string,

                /// Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Defaults to "".
                value: optional string,

                /// Source for the environment variable's value. Cannot be used if value is not empty.
                valueFrom: optional Source,

                /// EnvVarSource represents a source for the value of an EnvVar.
                struct Source {

                    /// Selects a field of the pod: supports metadata.name, metadata.namespace, `metadata.labels['<KEY>']`, `metadata.annotations['<KEY>']`, spec.nodeName, spec.serviceAccountName, status.hostIP, status.podIP, status.podIPs.
                    fieldRef: optional ObjectFieldSelector,

                    /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported.
                    resourceFieldRef: optional ResourceFieldSelector,

                    /// Selects a key of a ConfigMap.
                    configMapKeyRef: optional ConfigMapKeySelector,

                    /// Selects a key of a secret in the pod's namespace
                    secretKeyRef: optional SecretKeySelector,

                    /// Selects a key from a ConfigMap.
                    struct ConfigMapKeySelector {

                        /// The ConfigMap to select from.
                        _inline: LocalObjectReference,

                        /// The key to select.
                        key: string,

                        /// Specify whether the ConfigMap or its key must be defined
                        optional: optional bool,
                    }

                    /// SecretKeySelector selects a key of a Secret.
                    struct SecretKeySelector {

                        /// The name of the secret in the pod's namespace to select from.
                        _inline: LocalObjectReference,

                        /// The key of the secret to select from.  Must be a valid secret key.
                        key: string,

                        /// Specify whether the Secret or its key must be defined
                        optional: optional bool,
                    }
                }
            }

            /// HostAlias holds the mapping between IP and hostnames that will be injected as an entry in the pod's hosts file.
            struct HostAlias {

                /// IP address of the host file entry.
                @go::name(name: "IP")
                ip: optional string,

                /// Hostnames for the above IP address.
                hostnames: optional list(value: string),
            }

            /// Lifecycle describes actions that the management system should take in response to container lifecycle events. For the PostStart and PreStop lifecycle handlers, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.
            struct Lifecycle {

                /// PostStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
                postStart: optional Handler,

                /// PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks
                preStop: optional Handler,
            }

            /// ObjectFieldSelector selects an APIVersioned field of an object.
            struct ObjectFieldSelector {

                /// Version of the schema the FieldPath is written in terms of, defaults to "v1".
                @go::name(name: "APIVersion")
                apiVersion: optional string,

                /// Path of the field to select in the specified API version.
                fieldPath: string,
            }

            /// PodDNSConfig defines the DNS parameters of a pod in addition to those generated from DNSPolicy.
            struct PodDNSConfig {

                /// A list of DNS name server IP addresses. This will be appended to the base nameservers generated from DNSPolicy. Duplicated nameservers will be removed.
                nameservers: optional list(value: string),

                /// A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from DNSPolicy. Duplicated search paths will be removed.
                searches: optional list(value: string),

                /// A list of DNS resolver options. This will be merged with the base options generated from DNSPolicy. Duplicated entries will be removed. Resolution options given in Options will override those that appear in the base DNSPolicy.
                options: optional list(value: Option),

                /// PodDNSConfigOption defines DNS resolver options of a pod.
                struct Option {

                    /// Required.
                    name: optional string,
                    value: optional string,
                }
            }

            /// PodReadinessGate contains the reference to a pod condition
            struct PodReadinessGate {

                /// ConditionType refers to a condition in the pod's condition list with matching type.
                conditionType: Pod::ConditionType,
            }

            /// PodSecurityContext holds pod-level security attributes and common container settings. Some fields are also present in container.securityContext.  Field values of container.securityContext take precedence over field values of PodSecurityContext.
            struct PodSecurityContext {

                /// The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                @go::name(name: "SELinuxOptions")
                seLinuxOptions: optional Pod::Spec::SELinuxOptions,

                /// The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                windowsOptions: optional Pod::Spec::WindowsSecurityContextOptions,

                /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                runAsUser: optional int64,

                /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.
                runAsGroup: optional int64,

                /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                runAsNonRoot: optional bool,

                /// A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.
                supplementalGroups: optional list(value: int64),

                /// A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:
                ///  1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----
                ///  If unset, the Kubelet will not modify the ownership and permissions of any volume.
                @go::name(name: "FSGroup")
                fsGroup: optional int64,

                /// Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.
                sysctls: optional list(value: Sysctl),

                /// fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are "OnRootMismatch" and "Always". If not specified, "Always" is used.
                @go::name(name: "FSGroupChangePolicy")
                fsGroupChangePolicy: optional PodFSGroupChangePolicy,

                /// The seccomp options to use by the containers in this pod.
                seccompProfile: optional Pod::Spec::SeccompProfile,

                /// PodFSGroupChangePolicy holds policies that will be used for applying fsGroup to a volume when volume is mounted.
                enum PodFSGroupChangePolicy {
                    OnRootMismatch, Always
                }

                /// Sysctl defines a kernel parameter to be set
                struct Sysctl {

                    /// Name of a property to set
                    name: string,

                    /// Value of a property to set
                    value: string,
                }
            }

            /// PreemptionPolicy describes a policy for if/when to preempt a pod.
            enum PreemptionPolicy {
                PreemptLowerPriority, Never
            }

            /// Probe describes a health check to be performed against a container to determine whether it is alive or ready to receive traffic.
            struct Probe {

                /// The action taken to determine the health of a container
                _inline: EphemeralContainer::Common::Handler,

                /// Number of seconds after the container has started before liveness probes are initiated. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                initialDelaySeconds: optional int32,

                /// Number of seconds after which the probe times out. Defaults to 1 second. Minimum value is 1. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#container-probes
                timeoutSeconds: optional int32,

                /// How often (in seconds) to perform the probe. Default to 10 seconds. Minimum value is 1.
                periodSeconds: optional int32,

                /// Minimum consecutive successes for the probe to be considered successful after having failed. Defaults to 1. Must be 1 for liveness and startup. Minimum value is 1.
                successThreshold: optional int32,

                /// Minimum consecutive failures for the probe to be considered failed after having succeeded. Defaults to 3. Minimum value is 1.
                failureThreshold: optional int32,
            }

            /// PullPolicy describes a policy for if/when to pull a container image
            enum PullPolicy {
                Always, Never, IfNotPresent
            }

            /// ResourceFieldSelector represents container resources (cpu, memory) and their output format
            struct ResourceFieldSelector {

                /// Container name: required for volumes, optional for env vars
                containerName: optional string,

                /// Required: resource to select
                resource: string,

                /// Specifies the output format of the exposed resources, defaults to "1"
                divisor: optional quantity,
            }

            /// RestartPolicy describes how the container should be restarted. Only one of the following restart policies may be specified. If none of the following policies is specified, the default one is RestartPolicyAlways.
            enum RestartPolicy {
                Always, OnFailure, Never
            }

            /// SELinuxOptions are the labels to be applied to the container
            struct SELinuxOptions {

                /// User is a SELinux user label that applies to the container.
                user: optional string,

                /// Role is a SELinux role label that applies to the container.
                role: optional string,

                /// Type is a SELinux type label that applies to the container.
                type: optional string,

                /// Level is SELinux level label that applies to the container.
                level: optional string,
            }

            /// SeccompProfile defines a pod/container's seccomp profile settings. Only one profile source may be set.
            struct SeccompProfile {

                /// type indicates which kind of seccomp profile will be applied. Valid options are:
                ///  Localhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.
                type: Type,

                /// localhostProfile indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is "Localhost".
                localhostProfile: optional string,

                /// SeccompProfileType defines the supported seccomp profile types.
                enum Type {
                    Unconfirmed, RuntimeDefault, Localhost
                }
            }

            /// SecurityContext holds security configuration that will be applied to a container. Some fields are present in both SecurityContext and PodSecurityContext.  When both are set, the values in SecurityContext take precedence.
            struct SecurityContext {

                /// The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime.
                capabilities: optional Capabilities,

                /// Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.
                privileged: optional bool,

                /// The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                @go::name(name: "SELinuxOptions")
                seLinuxOptions: optional Pod::Spec::SELinuxOptions,

                /// The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                windowsOptions: optional Pod::Spec::WindowsSecurityContextOptions,

                /// The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                runAsUser: optional int64,

                /// The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                runAsGroup: optional int64,

                /// Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                runAsNonRoot: optional bool,

                /// Whether this container has a read-only root filesystem. Default is false.
                readOnlyRootFilesystem: optional bool,

                /// AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN
                allowPrivilegeEscalation: optional bool,

                /// procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.
                procMount: optional ProcMountType,

                /// The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options.
                seccompProfile: optional Pod::Spec::SeccompProfile,

                /// Adds and removes POSIX capabilities from running containers.
                struct Capabilities {

                    /// Added capabilities
                    add: optional list(value: Capability),

                    /// Removed capabilities
                    drop: optional list(value: Capability),

                    /// Capability represent POSIX capabilities type
                    newtype Capability: string
                }
                enum ProcMountType {
                    Default, Unmasked
                }
            }

            /// TerminationMessagePolicy describes how termination messages are retrieved from a container.
            enum TerminationMessagePolicy {
                File, FallbackToLogsOnError 
            }

            /// The pod this Toleration is attached to tolerates any taint that matches the triple <key,value,effect> using the matching operator <operator>.
            struct Toleration {

                /// Key is the taint key that the toleration applies to. Empty means match all taint keys. If the key is empty, operator must be Exists; this combination means to match all values and all keys.
                key: optional string,

                /// Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.
                operator: optional Operator,

                /// Value is the taint value the toleration matches to. If the operator is Exists, the value should be empty, otherwise just a regular string.
                value: optional string,

                /// Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.
                effect: optional TaintEffect,

                /// TolerationSeconds represents the period of time the toleration (which must be of effect NoExecute, otherwise this field is ignored) tolerates the taint. By default, it is not set, which means tolerate the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.
                tolerationSeconds: optional int64,

                /// A toleration operator is the set of operators that can be used in a toleration.
                enum Operator {
                    Exists, Eqal 
                }
            }

            /// TopologySpreadConstraint specifies how to spread matching pods among the given topology.
            struct TopologySpreadConstraint {

                /// MaxSkew describes the degree to which pods may be unevenly distributed. When `whenUnsatisfiable=DoNotSchedule`, it is the maximum permitted difference between the number of matching pods in the target topology and the global minimum. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 1/1/0: | zone1 | zone2 | zone3 | |   P   |   P   |       | - if MaxSkew is 1, incoming pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1(zone2) would make the ActualSkew(2-0) on zone1(zone2) violate MaxSkew(1). - if MaxSkew is 2, incoming pod can be scheduled onto any zone. When `whenUnsatisfiable=ScheduleAnyway`, it is used to give higher precedence to topologies that satisfy it. It's a required field. Default value is 1 and 0 is not allowed.
                maxSkew: int32,

                /// TopologyKey is the key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each <key, value> as a "bucket", and try to put balanced number of pods into each bucket. It's a required field.
                topologyKey: string,

                /// WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,   but giving higher precedence to topologies that would help reduce the   skew. A constraint is considered "Unsatisfiable" for an incoming pod if and only if every possible node assigment for that pod would violate "MaxSkew" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.
                whenUnsatisfiable: UnsatisfiableConstraintAction,

                /// LabelSelector is used to find matching pods. Pods that match this label selector are counted to determine the number of pods in their corresponding topology domain.
                labelSelector: optional meta.k8s.io/v1::LabelSelector,
                enum UnsatisfiableConstraintAction {
                    DoNotSchedule, ScheduleAnyway 
                }
            }

            /// Volume represents a named volume in a pod that may be accessed by any container in the pod.
            struct Volume {

                /// Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                name: string,

                /// VolumeSource represents the location and type of the mounted volume. If not specified, the Volume is implied to be an EmptyDir. This implied behavior is deprecated and will be removed in a future version.
                _inline: Source,

                /// Represents the source of a volume to mount. Only one of its members may be specified.
                union(untagged: true) Source {

                    /// HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath --- TODO(jonesdl) We need to restrict who can use host directory mounts and who can/can not mount host directories as read/write.
                    hostPath: optional HostPathVolumeSource,

                    /// EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                    emptyDir: optional EmptyDirVolumeSource,

                    /// GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
                    @go::name(name: "GCEPersistentDisk")
                    gcePersistentDisk: optional GCEPersistentDiskVolumeSource,

                    /// AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
                    @go::name(name: "AWSElasticBlockStore")
                    awsElasticBlockStore: optional AWSElasticBlockStoreVolumeSource,

                    /// GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
                    gitRepo: optional GitRepoVolumeSource,

                    /// Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                    secret: optional SecretVolumeSource,

                    /// NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
                    @go::name(name: "NFS")
                    nfs: optional NFSVolumeSource,

                    /// ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://examples.k8s.io/volumes/iscsi/README.md
                    @go::name(name: "ISCSI")
                    iscsi: optional ISCSIVolumeSource,

                    /// Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/glusterfs/README.md
                    glusterfs: optional GlusterfsVolumeSource,

                    /// PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                    persistentVolumeClaim: optional PersistentVolumeClaimVolumeSource,

                    /// RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://examples.k8s.io/volumes/rbd/README.md
                    @go::name(name: "RBD")
                    rbd: optional RBDVolumeSource,

                    /// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
                    flexVolume: optional FlexVolumeSource,

                    /// Cinder represents a cinder volume attached and mounted on kubelets host machine. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                    cinder: optional CinderVolumeSource,

                    /// CephFS represents a Ceph FS mount on the host that shares a pod's lifetime
                    @go::name(name: "CephFS")
                    cephfs: optional CephFSVolumeSource,

                    /// Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running
                    flocker: optional FlockerVolumeSource,

                    /// DownwardAPI represents downward API about the pod that should populate this volume
                    downwardAPI: optional DownwardAPIVolumeSource,

                    /// FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod.
                    @go::name(name: "FC")
                    fc: optional FCVolumeSource,

                    /// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
                    azureFile: optional AzureFileVolumeSource,

                    /// ConfigMap represents a configMap that should populate this volume
                    configMap: optional ConfigMapVolumeSource,

                    /// VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine
                    vsphereVolume: optional VsphereVirtualDiskVolumeSource,

                    /// Quobyte represents a Quobyte mount on the host that shares a pod's lifetime
                    quobyte: optional QuobyteVolumeSource,

                    /// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
                    azureDisk: optional AzureDiskVolumeSource,

                    /// PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine
                    photonPersistentDisk: optional PhotonPersistentDiskVolumeSource,

                    /// Items for all in one resources secrets, configmaps, and downward API
                    projected: optional ProjectedVolumeSource,

                    /// PortworxVolume represents a portworx volume attached and mounted on kubelets host machine
                    portworxVolume: optional PortworxVolumeSource,

                    /// ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes.
                    scaleIO: optional ScaleIOVolumeSource,

                    /// StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes.
                    @go::name(name: "StorageOS")
                    storageos: optional StorageOSVolumeSource,

                    /// CSI (Container Storage Interface) represents ephemeral storage that is handled by certain external CSI drivers (Beta feature).
                    @go::name(name: "CSI")
                    csi: optional CSIVolumeSource,

                    /// Ephemeral represents a volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.
                    ///  Use this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity    tracking are needed, c) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through    a PersistentVolumeClaim (see EphemeralVolumeSource for more    information on the connection between this volume type    and PersistentVolumeClaim).
                    ///  Use PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.
                    ///  Use CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.
                    ///  A pod can use both types of ephemeral volumes and persistent volumes at the same time.
                    ephemeral: optional EphemeralVolumeSource,

                    /// AzureFile represents an Azure File Service mount on the host and bind mount to the pod.
                    struct AzureFileVolumeSource {

                        /// the name of secret that contains Azure Storage Account Name and Key
                        secretName: string,

                        /// Share Name
                        shareName: string,

                        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                        readOnly: optional bool,
                    }

                    /// Represents a source location of a volume to mount, managed by an external CSI driver
                    struct CSIVolumeSource {

                        /// Driver is the name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.
                        driver: string,

                        /// Specifies a read-only configuration for the volume. Defaults to false (read/write).
                        readOnly: optional bool,

                        /// Filesystem type to mount. Ex. "ext4", "xfs", "ntfs". If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.
                        @go::name(name: "FSType")
                        fsType: optional string,

                        /// VolumeAttributes stores driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.
                        volumeAttributes: optional simple-map(key: string, value: string),

                        /// NodePublishSecretRef is a reference to the secret object containing sensitive information to pass to the CSI driver to complete the CSI NodePublishVolume and NodeUnpublishVolume calls. This field is optional, and  may be empty if no secret is required. If the secret object contains more than one secret, all secret references are passed.
                        nodePublishSecretRef: optional LocalObjectReference,
                    }

                    /// Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.
                    struct CephFSVolumeSource {

                        /// Required: Monitors is a collection of Ceph monitors More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                        monitors: list(value: string),

                        /// Optional: Used as the mounted root, rather than the full Ceph tree, default is /
                        path: optional string,

                        /// Optional: User is the rados user name, default is admin More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                        user: optional string,

                        /// Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                        secretFile: optional string,

                        /// Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                        secretRef: optional LocalObjectReference,

                        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/volumes/cephfs/README.md#how-to-use-it
                        readOnly: optional bool,
                    }

                    /// Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.
                    struct CinderVolumeSource {

                        /// volume id used to identify the volume in cinder. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                        volumeID: string,

                        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                        @go::name(name: "FSType")
                        fsType: optional string,

                        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://examples.k8s.io/mysql-cinder-pd/README.md
                        readOnly: optional bool,

                        /// Optional: points to a secret object containing parameters used to connect to OpenStack.
                        secretRef: optional LocalObjectReference,
                    }

                    /// Adapts a ConfigMap into a volume.
                    ///  The contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.
                    struct ConfigMapVolumeSource {
                        _inline: LocalObjectReference,

                        /// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                        items: optional list(value: Pod::Spec::Volume::Source::KeyToPath),

                        /// Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                        defaultMode: optional int32,

                        /// Specify whether the ConfigMap or its keys must be defined
                        optional: optional bool,
                    }

                    /// DownwardAPIVolumeFile represents information to create the file containing the pod field
                    struct DownwardAPIVolumeFile {

                        /// Required: Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'
                        path: string,

                        /// Required: Selects a field of the pod: only annotations, labels, name and namespace are supported.
                        fieldRef: optional Pod::Spec::ObjectFieldSelector,

                        /// Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported.
                        resourceFieldRef: optional Pod::Spec::ResourceFieldSelector,

                        /// Optional: mode bits used to set permissions on this file, must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                        mode: optional int32,
                    }

                    /// DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.
                    struct DownwardAPIVolumeSource {

                        /// Items is a list of downward API volume file
                        items: optional list(value: Pod::Spec::Volume::Source::DownwardAPIVolumeFile),

                        /// Optional: mode bits to use on created files by default. Must be a Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                        defaultMode: optional int32,
                    }

                    /// Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.
                    struct EmptyDirVolumeSource {

                        /// What type of storage medium should back this directory. The default is "" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir
                        medium: optional StorageMedium,

                        /// Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir
                        sizeLimit: optional quantity,

                        /// StorageMedium defines ways that storage can be allocated to a volume.
                        enum StorageMedium {
                            Memory, HugePages, 
                            // TODO: this isn't a enum per-se because we accept arbitrary numbers
                            // after HugePages-
                        }
                    }

                    /// Represents an ephemeral volume that is handled by a normal storage driver.
                    struct EphemeralVolumeSource {

                        /// Will be used to create a stand-alone PVC to provision the volume. The pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the pod.  The name of the PVC will be `<pod name>-<volume name>` where `<volume name>` is the name from the `Pod::Spec.Volumes` array entry. Pod validation will reject the pod if the concatenated name is not valid for a PVC (for example, too long).
                        ///  An existing PVC with that name that is not owned by the pod will *not* be used for the pod to avoid using an unrelated volume by mistake. Starting the pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the pod, the PVC has to updated with an owner reference to the pod once the pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.
                        ///  This field is read-only and no changes will be made by Kubernetes to the PVC after it has been created.
                        ///  Required, must not be nil.
                        volumeClaimTemplate: optional PersistentVolumeClaimTemplate,

                        /// Specifies a read-only configuration for the volume. Defaults to false (read/write).
                        readOnly: optional bool,

                        /// PersistentVolumeClaimTemplate is used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.
                        struct PersistentVolumeClaimTemplate {

                            /// May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed and will be rejected during validation.
                            @go::name(name: "")
                            metadata: optional meta.k8s.io/v1::ObjectMeta,

                            /// The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here.
                            spec: PersistentVolumeClaim::Spec,
                        }
                    }

                    /// FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.
                    struct FlexVolumeSource {

                        /// Driver is the name of the driver to use for this volume.
                        driver: string,

                        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". The default filesystem depends on FlexVolume script.
                        @go::name(name: "FSType")
                        fsType: optional string,

                        /// Optional: SecretRef is reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts.
                        secretRef: optional LocalObjectReference,

                        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                        readOnly: optional bool,

                        /// Optional: Extra command options if any.
                        options: optional simple-map(key: string, value: string),
                    }

                    /// Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling.
                    ///  DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.
                    struct GitRepoVolumeSource {

                        /// Repository URL
                        repository: string,

                        /// Commit hash for the specified revision.
                        revision: optional string,

                        /// Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.
                        directory: optional string,
                    }

                    /// Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.
                    struct GlusterfsVolumeSource {

                        /// EndpointsName is the endpoint name that details Glusterfs topology. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                        @go::name(name: "EndpointsName")
                        endpoints: string,

                        /// Path is the Glusterfs volume path. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                        path: string,

                        /// ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://examples.k8s.io/volumes/glusterfs/README.md#create-a-pod
                        readOnly: optional bool,
                    }

                    /// Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.
                    struct ISCSIVolumeSource {

                        /// iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                        targetPortal: string,

                        /// Target iSCSI Qualified Name.
                        @go::name(name: "IQN")
                        iqn: string,

                        /// iSCSI Target Lun number.
                        lun: int32,

                        /// iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).
                        @go::name(name: "ISCSIInterface")
                        iscsiInterface: optional string,

                        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi TODO: how do we prevent errors in the filesystem from compromising the machine
                        @go::name(name: "FSType")
                        fsType: optional string,

                        /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false.
                        readOnly: optional bool,

                        /// iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).
                        portals: optional list(value: string),

                        /// whether support iSCSI Discovery CHAP authentication
                        @go::name(name: "DiscoveryCHAPAuth")
                        chapAuthDiscovery: optional bool,

                        /// whether support iSCSI Session CHAP authentication
                        @go::name(name: "SessionCHAPAuth")
                        chapAuthSession: optional bool,

                        /// CHAP Secret for iSCSI target and initiator authentication
                        secretRef: optional LocalObjectReference,

                        /// Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.
                        initiatorName: optional string,
                    }

                    /// Maps a string key to a path within a volume.
                    struct KeyToPath {

                        /// The key to project.
                        key: string,

                        /// The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.
                        path: string,

                        /// Optional: mode bits used to set permissions on this file. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                        mode: optional int32,
                    }

                    /// PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).
                    struct PersistentVolumeClaimVolumeSource {

                        /// ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims
                        claimName: string,

                        /// Will force the ReadOnly setting in VolumeMounts. Default false.
                        readOnly: optional bool,
                    }

                    /// Represents a projected volume source
                    struct ProjectedVolumeSource {

                        /// list of volume projections
                        sources: optional list(value: Projection),

                        /// Mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                        defaultMode: optional int32,

                        /// Projection that may be projected along with other supported volume types
                        struct Projection {

                            /// information about the secret data to project
                            secret: optional SecretProjection,

                            /// information about the downwardAPI data to project
                            downwardAPI: optional DownwardAPIProjection,

                            /// information about the configMap data to project
                            configMap: optional ConfigMapProjection,

                            /// information about the serviceAccountToken data to project
                            serviceAccountToken: optional ServiceAccountTokenProjection,

                            /// Adapts a ConfigMap into a projected volume.
                            ///  The contents of the target ConfigMap's Data field will be presented in a projected volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.
                            struct ConfigMapProjection {
                                _inline: LocalObjectReference,

                                /// If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                                items: optional list(value: Pod::Spec::Volume::Source::KeyToPath),

                                /// Specify whether the ConfigMap or its keys must be defined
                                optional: optional bool,
                            }

                            /// Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.
                            struct DownwardAPIProjection {

                                /// Items is a list of DownwardAPIVolume file
                                items: optional list(value: Pod::Spec::Volume::Source::DownwardAPIVolumeFile),
                            }

                            /// Adapts a secret into a projected volume.
                            ///  The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.
                            struct SecretProjection {
                                _inline: LocalObjectReference,

                                /// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                                items: optional list(value: Pod::Spec::Volume::Source::KeyToPath),

                                /// Specify whether the Secret or its key must be defined
                                optional: optional bool,
                            }

                            /// ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).
                            struct ServiceAccountTokenProjection {

                                /// Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.
                                audience: optional string,

                                /// ExpirationSeconds is the requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.
                                expirationSeconds: optional int64,

                                /// Path is the path relative to the mount point of the file to project the token into.
                                path: string,
                            }
                        }
                    }

                    /// Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.
                    struct RBDVolumeSource {

                        /// A collection of Ceph monitors. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                        @go::name(name: "CephMonitors")
                        monitors: list(value: string),

                        /// The rados image name. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                        @go::name(name: "RBDImage")
                        image: string,

                        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd TODO: how do we prevent errors in the filesystem from compromising the machine
                        @go::name(name: "FSType")
                        fsType: optional string,

                        /// The rados pool name. Default is rbd. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                        @go::name(name: "RBDPool")
                        pool: optional string,

                        /// The rados user name. Default is admin. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                        @go::name(name: "RadosUser")
                        user: optional string,

                        /// Keyring is the path to key ring for RBDUser. Default is /etc/ceph/keyring. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                        keyring: optional string,

                        /// SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring. Default is nil. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                        secretRef: optional LocalObjectReference,

                        /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://examples.k8s.io/volumes/rbd/README.md#how-to-use-it
                        readOnly: optional bool,
                    }

                    /// ScaleIOVolumeSource represents a persistent ScaleIO volume
                    struct ScaleIOVolumeSource {

                        /// The host address of the ScaleIO API Gateway.
                        gateway: string,

                        /// The name of the storage system as configured in ScaleIO.
                        system: string,

                        /// SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail.
                        secretRef: LocalObjectReference,

                        /// Flag to enable/disable SSL communication with Gateway, default false
                        @go::name(name: "SSLEnabled")
                        sslEnabled: optional bool,

                        /// The name of the ScaleIO Protection Domain for the configured storage.
                        protectionDomain: optional string,

                        /// The ScaleIO Storage Pool associated with the protection domain.
                        storagePool: optional string,

                        /// Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned. Default is ThinProvisioned.
                        storageMode: optional string,

                        /// The name of a volume already created in the ScaleIO system that is associated with this volume source.
                        volumeName: optional string,

                        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Default is "xfs".
                        @go::name(name: "FSType")
                        fsType: optional string,

                        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                        readOnly: optional bool,
                    }

                    /// Adapts a Secret into a volume.
                    ///  The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling.
                    struct SecretVolumeSource {

                        /// Name of the secret in the pod's namespace to use. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret
                        secretName: optional string,

                        /// If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.
                        items: optional list(value: Pod::Spec::Volume::Source::KeyToPath),

                        /// Optional: mode bits used to set permissions on created files by default. Must be an octal value between 0000 and 0777 or a decimal value between 0 and 511. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.
                        defaultMode: optional int32,

                        /// Specify whether the Secret or its keys must be defined
                        optional: optional bool,
                    }

                    /// Represents a StorageOS persistent volume resource.
                    struct StorageOSVolumeSource {

                        /// VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.
                        volumeName: optional string,

                        /// VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to "default" if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.
                        volumeNamespace: optional string,

                        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
                        @go::name(name: "FSType")
                        fsType: optional string,

                        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
                        readOnly: optional bool,

                        /// SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted.
                        secretRef: optional LocalObjectReference,
                    }
                }
            }

            /// volumeDevice describes a mapping of a raw block device within a container.
            struct VolumeDevice {

                /// name must match the name of a persistentVolumeClaim in the pod
                name: string,

                /// devicePath is the path inside of the container that the device will be mapped to.
                devicePath: string,
            }

            /// VolumeMount describes a mounting of a Volume within a container.
            struct VolumeMount {

                /// This must match the Name of a Volume.
                name: string,

                /// Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.
                readOnly: optional bool,

                /// Path within the container at which the volume should be mounted.  Must not contain ':'.
                mountPath: string,

                /// Path within the volume from which the container's volume should be mounted. Defaults to "" (volume's root).
                subPath: optional string,

                /// mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, MountPropagationNone is used. This field is beta in 1.10.
                mountPropagation: optional MountPropagationMode,

                /// Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to SubPath but environment variable references $(VAR_NAME) are expanded using the container's environment. Defaults to "" (volume's root). SubPathExpr and SubPath are mutually exclusive.
                subPathExpr: optional string,

                /// MountPropagationMode describes mount propagation.
                enum MountPropagationMode {
                    None, HostToContainer, Bidirectional 
                }
            }

            /// WindowsSecurityContextOptions contain Windows-specific options and credentials.
            struct WindowsSecurityContextOptions {

                /// GMSACredentialSpecName is the name of the GMSA credential spec to use.
                @go::name(name: "GMSACredentialSpecName")
                gmsaCredentialSpecName: optional string,

                /// GMSACredentialSpec is where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the GMSACredentialSpecName field.
                @go::name(name: "GMSACredentialSpec")
                gmsaCredentialSpec: optional string,

                /// The UserName in Windows to run the entrypoint of the container process. Defaults to the user specified in image metadata if unspecified. May also be set in PodSecurityContext. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.
                runAsUserName: optional string,
            }

            /// An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.
            struct EphemeralContainer {

                /// Ephemeral containers have all of the fields of Container, plus additional fields specific to ephemeral containers. Fields in common with Container are in the following inlined struct so than an EphemeralContainer may easily be converted to a Container.
                _inline: Common,

                /// If set, the name of the container from Pod::Spec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.
                targetContainerName: optional string,

                /// EphemeralContainerCommon is a copy of all fields in Container to be inlined in EphemeralContainer. This separate type allows easy conversion from EphemeralContainer to Container and allows separate documentation for the fields of EphemeralContainer. When a new field is added to Container it must be added here as well.
                struct Common {

                    /// Name of the ephemeral container specified as a DNS_LABEL. This name must be unique among all containers, init containers and ephemeral containers.
                    name: string,

                    /// Docker image name. More info: https://kubernetes.io/docs/concepts/containers/images
                    image: optional string,

                    /// Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    command: optional list(value: string),

                    /// Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated. More info: https://kubernetes.io/docs/tasks/inject-data-application/define-command-argument-container/#running-a-command-in-a-shell
                    args: optional list(value: string),

                    /// Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.
                    workingDir: optional string,

                    /// Ports are not allowed for ephemeral containers.
                    ports: optional list(value: ContainerPort),

                    /// List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.
                    envFrom: optional list(value: EnvFromSource),

                    /// List of environment variables to set in the container. Cannot be updated.
                    env: optional list-map(value: EnvVar, keys: [.name]),

                    /// Resources are not allowed for ephemeral containers. Ephemeral containers use spare resources already allocated to the pod.
                    resources: optional ResourceRequirements,

                    /// Pod volumes to mount into the container's filesystem. Cannot be updated.
                    volumeMounts: optional list-map(value: VolumeMount, keys: [.mountPath]),

                    /// volumeDevices is the list of block devices to be used by the container.
                    volumeDevices: optional list-map(value: VolumeDevice, keys: [.devicePath]),

                    /// Probes are not allowed for ephemeral containers.
                    livenessProbe: optional Probe,

                    /// Probes are not allowed for ephemeral containers.
                    readinessProbe: optional Probe,

                    /// Probes are not allowed for ephemeral containers.
                    startupProbe: optional Probe,

                    /// Lifecycle is not allowed for ephemeral containers.
                    lifecycle: optional Lifecycle,

                    /// Optional: Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.
                    terminationMessagePath: optional string,

                    /// Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.
                    terminationMessagePolicy: optional TerminationMessagePolicy,

                    /// Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images
                    imagePullPolicy: optional PullPolicy,

                    /// SecurityContext is not allowed for ephemeral containers.
                    securityContext: optional SecurityContext,

                    /// Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF. Default is false.
                    stdin: optional bool,

                    /// Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF. Default is false
                    stdinOnce: optional bool,

                    /// Whether this container should allocate a TTY for itself, also requires 'stdin' to be true. Default is false.
                    @go::name(name: "TTY")
                    tty: optional bool,

                    /// Handler defines a specific action that should be taken TODO: pass structured data to these actions, and document that data here.
                    struct Handler {

                        /// One and only one of the following should be specified. Exec specifies the action to take.
                        exec: optional ExecAction,

                        /// HTTPGet specifies the http request to perform.
                        @go::name(name: "HTTPGet")
                        httpGet: optional HTTPGetAction,

                        /// TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported TODO: implement a realistic TCP lifecycle hook
                        @go::name(name: "TCPSocket")
                        tcpSocket: optional TCPSocketAction,

                        /// ExecAction describes a "run in container" action.
                        struct ExecAction {

                            /// Command is the command line to execute inside the container, the working directory for the command  is root ('/') in the container's filesystem. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
                            command: optional list(value: string),
                        }

                        /// HTTPGetAction describes an action based on HTTP Get requests.
                        struct HTTPGetAction {

                            /// Path to access on the HTTP server.
                            path: optional string,

                            /// Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                            port: int-or-string,

                            /// Host name to connect to, defaults to the pod IP. You probably want to set "Host" in httpHeaders instead.
                            host: optional string,

                            /// Scheme to use for connecting to the host. Defaults to HTTP.
                            scheme: optional URIScheme,

                            /// Custom headers to set in the request. HTTP allows repeated headers.
                            @go::name(name: "HTTPHeaders")
                            httpHeaders: optional list(value: HTTPHeader),

                            /// HTTPHeader describes a custom header to be used in HTTP probes
                            struct HTTPHeader {

                                /// The header field name
                                name: string,

                                /// The header field value
                                value: string,
                            }

                            /// URIScheme identifies the scheme used for connection to a host for Get actions
                            enum URIScheme {
                                HTTP, HTTPS
                            }
                        }

                        /// TCPSocketAction describes an action based on opening a socket
                        struct TCPSocketAction {

                            /// Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                            port: int-or-string,

                            /// Optional: Host name to connect to, defaults to the pod IP.
                            host: optional string,
                        }
                    }
                }
            }
        }

        /// Pod::Status represents information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.
        struct Status {

            /// The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:
            ///  Pending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.
            ///  More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase
            phase: optional PodPhase,

            /// Current service state of pod. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
            conditions: optional list-map(value: PodCondition, keys: [.type]),

            /// A human readable message indicating details about why the pod is in this condition.
            message: optional string,

            /// A brief CamelCase message indicating details about why the pod is in this state. e.g. 'Evicted'
            reason: optional string,

            /// nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than Pod::Spec.nodeName when the pod is scheduled.
            nominatedNodeName: optional string,

            /// IP address of the host to which the pod is assigned. Empty if not yet scheduled.
            hostIP: optional string,

            /// IP address allocated to the pod. Routable at least within the cluster. Empty if not yet allocated.
            podIP: optional string,

            /// podIPs holds the IP addresses allocated to the pod. If this field is specified, the 0th entry must match the podIP field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.
            podIPs: optional list-map(value: PodIP, keys: [.ip]),

            /// RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod.
            startTime: optional time,

            /// The list has one entry per init container in the manifest. The most recent successful init container will have ready = true, the most recently started container will have startTime set. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
            initContainerStatuses: optional list(value: ContainerStatus),

            /// The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-and-container-status
            containerStatuses: optional list(value: ContainerStatus),

            /// The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md
            @go::name(name: "QOSClass")
            qosClass: optional PodQOSClass,

            /// Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.
            ephemeralContainerStatuses: optional list(value: ContainerStatus),

            /// ContainerStatus contains details for the current status of this container.
            struct ContainerStatus {

                /// This must be a DNS_LABEL. Each container in a pod must have a unique name. Cannot be updated.
                name: string,

                /// Details about the container's current condition.
                state: optional ContainerState,

                /// Details about the container's last termination condition.
                @go::name(name: "LastTerminationState")
                lastState: optional ContainerState,

                /// Specifies whether the container has passed its readiness probe.
                ready: bool,

                /// The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.
                restartCount: int32,

                /// The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images TODO(dchen1107): Which image the container is running with?
                image: string,

                /// ImageID of the container's image.
                imageID: string,

                /// Container's ID in the format 'docker://<container_id>'.
                containerID: optional string,

                /// Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no startupProbe is defined.
                started: optional bool,

                /// ContainerState holds a possible state of container. Only one of its members may be specified. If none of them is specified, the default one is ContainerStateWaiting.
                struct ContainerState {

                    /// Details about a waiting container
                    waiting: optional Waiting,

                    /// Details about a running container
                    running: optional Running,

                    /// Details about a terminated container
                    terminated: optional Terminated,

                    /// ContainerStateRunning is a running state of a container.
                    struct Running {

                        /// Time at which the container was last (re-)started
                        startedAt: optional time,
                    }

                    /// ContainerStateTerminated is a terminated state of a container.
                    struct Terminated {

                        /// Exit status from the last termination of the container
                        exitCode: int32,

                        /// Signal from the last termination of the container
                        signal: optional int32,

                        /// (brief) reason from the last termination of the container
                        reason: optional string,

                        /// Message regarding the last termination of the container
                        message: optional string,

                        /// Time at which previous execution of the container started
                        startedAt: optional time,

                        /// Time at which the container last terminated
                        finishedAt: optional time,

                        /// Container's ID in the format 'docker://<container_id>'
                        containerID: optional string,
                    }

                    /// ContainerStateWaiting is a waiting state of a container.
                    struct Waiting {

                        /// (brief) reason the container is not yet running.
                        reason: optional string,

                        /// Message regarding why the container is not yet running.
                        message: optional string,
                    }
                }
            }

            /// PodCondition contains details for the current condition of this pod.
            struct PodCondition {

                /// Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
                type: Pod::ConditionType,

                /// Status is the status of the condition. Can be True, False, Unknown. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions
                status: ConditionStatus,

                /// Last time we probed the condition.
                lastProbeTime: optional time,

                /// Last time the condition transitioned from one status to another.
                lastTransitionTime: optional time,

                /// Unique, one-word, CamelCase reason for the condition's last transition.
                reason: optional string,

                /// Human-readable message indicating details about last transition.
                message: optional string,
            }

            /// IP address information for entries in the (plural) PodIPs field. Each entry includes:    IP: An IP address allocated to the pod. Routable at least within the cluster.
            struct PodIP {

                /// ip is an IP address (IPv4 or IPv6) assigned to the pod
                @go::name(name: "IP")
                ip: optional string,
            }

            /// PodPhase is a label for the condition of a pod at the current time.
            enum PodPhase {
               Pending, Running, Succeeded, Failed, Unknown 
            }

            /// PodQOSClass defines the supported qos classes of Pods.
            enum PodQOSClass {
               Guaranteed, Burstable, BestEffort 
            }
        }
    }

    /// PodStatusResult is a wrapper for Pod::Status returned by kubelet that can be encode/decoded
    kind PodStatusResult {

        /// Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status: optional Pod::Status,
    }

    /// PodTemplate describes a template for creating copies of a predefined pod.
    kind PodTemplate {

        /// Template defines the pods that will be created from this pod template. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        template: optional Spec,

        /// PodTemplateSpec describes the data a pod should have when created from a template
        struct Spec {

            /// Standard object's metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata
            // TODO: fake inline
            @go::name(name: "")
            metadata: optional meta.k8s.io/v1::ObjectMeta,

            /// Specification of the desired behavior of the pod. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
            spec: optional Pod::Spec,
        }
    }

    /// RangeAllocation is not a public type.
    kind RangeAllocation {

        /// Range is string that identifies the range represented by 'data'.
        range: string,

        /// Data is a bit array containing all allocated addresses in the previous segment.
        data: bytes,
    }

    /// ReplicationController represents the configuration of a replication controller.
    kind ReplicationController {

        /// Spec defines the specification of the desired behavior of the replication controller. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        spec: optional Spec,

        /// Status is the most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status: optional Status,
        /// ReplicationControllerSpec is the specification of a replication controller.
        struct Spec {

            /// Replicas is the number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified. Defaults to 1. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
            replicas: optional int32,

            /// Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 (pod will be considered available as soon as it is ready)
            minReadySeconds: optional int32,

            /// Selector is a label query over pods that should match the Replicas count. If Selector is empty, it is defaulted to the labels present on the Pod template. Label keys and values that must match in order to be controlled by this replication controller, if empty defaulted to labels on Pod template. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/#label-selectors
            selector: optional simple-map(key: string, value: string),

            /// Template is the object that describes the pod that will be created if insufficient replicas are detected. This takes precedence over a TemplateRef. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#pod-template
            template: optional PodTemplate::Spec,
        }

        /// ReplicationControllerStatus represents the current status of a replication controller.
        struct Status {

            /// Replicas is the most recently oberved number of replicas. More info: https://kubernetes.io/docs/concepts/workloads/controllers/replicationcontroller#what-is-a-replicationcontroller
            replicas: int32,

            /// The number of pods that have labels matching the labels of the pod template of the replication controller.
            fullyLabeledReplicas: optional int32,

            /// The number of ready replicas for this replication controller.
            readyReplicas: optional int32,

            /// The number of available replicas (ready for at least minReadySeconds) for this replication controller.
            availableReplicas: optional int32,

            /// ObservedGeneration reflects the generation of the most recently observed replication controller.
            observedGeneration: optional int64,

            /// Represents the latest available observations of a replication controller's current state.
            conditions: optional list-map(value: Condition, keys: [.type]),

            /// ReplicationControllerCondition describes the state of a replication controller at a certain point.
            struct Condition {

                /// Type of replication controller condition.
                type: Type,
                enum Type {
                    ReplicaFailure
                }

                /// Status of the condition, one of True, False, Unknown.
                status: ConditionStatus,

                /// The last time the condition transitioned from one status to another.
                lastTransitionTime: optional time,

                /// The reason for the condition's last transition.
                reason: optional string,

                /// A human readable message indicating details about the transition.
                message: optional string,
            }
        }
    }

    /// ResourceQuota sets aggregate quota restrictions enforced per namespace
    kind ResourceQuota {

        /// Spec defines the desired quota. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        spec: optional Spec,

        /// Status defines the actual enforced quota and its current usage. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status: optional Status,

        /// ResourceQuotaSpec defines the desired hard limits to enforce for Quota.
        struct Spec {

            /// hard is the set of desired hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
            hard: optional ResourceList,

            /// A collection of filters that must match each object tracked by a quota. If not specified, the quota matches all objects.
            scopes: optional list(value: Scope),

            /// scopeSelector is also a collection of filters like scopes that must match each object tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified in spec), must be matched.
            scopeSelector: optional ScopeSelector,

            /// A scope selector represents the AND of the selectors represented by the scoped-resource selector requirements.
            struct ScopeSelector {

                /// A list of scope selector requirements by scope of the resources.
                matchExpressions: optional list(value: Requirement),

                /// A scoped-resource selector requirement is a selector that contains values, a scope name, and an operator that relates the scope name and values.
                struct Requirement {

                    /// The name of the scope that the selector applies to.
                    scopeName: Scope,

                    /// Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.
                    operator: Operator,

                    /// An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.
                    values: optional list(value: string),

                    /// A scope selector operator is the set of operators that can be used in a scope selector requirement.
                    enum Operator {
                        In, NotIn, Exists, DoesNotExist,
                    }
                }
            }
        }

        /// ResourceQuotaStatus defines the enforced hard limits and observed use.
        struct Status {

            /// Hard is the set of enforced hard limits for each named resource. More info: https://kubernetes.io/docs/concepts/policy/resource-quotas/
            hard: optional ResourceList,

            /// Used is the current observed total usage of the resource in the namespace.
            used: optional ResourceList,
        }

        /// A ResourceQuotaScope defines a filter that must match each object tracked by a quota
        enum Scope {
            Terminating, NotTerminating,
            BestEffort, NotBestEffort,
            PriorityClass
        }
    }

    /// Secret holds secret data of a certain type. The total bytes of the values in the Data field must be less than MaxSecretSize bytes.
    kind Secret {

        /// Immutable, if set to true, ensures that data stored in the Secret cannot be updated (only object metadata can be modified). If not set to true, the field can be modified at any time. Defaulted to nil. This is a beta field enabled by ImmutableEphemeralVolumes feature gate.
        immutable: optional bool,

        /// Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4
        data: optional simple-map(key: string, value: bytes),

        /// stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.
        stringData: optional simple-map(key: string, value: string),

        /// Used to facilitate programmatic handling of secret data.
        type: optional Type,

        // TODO: not actually an enum, just has well-known values, I think?
        newtype Type: string
    }

    /// Service is a named abstraction of software service (for example, mysql) consisting of local port (for example 3306) that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.
    kind Service {

        /// Spec defines the behavior of a service. https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        spec: optional Spec,

        /// Most recently observed status of the service. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status
        status: optional Status,

        /// ServiceSpec describes the attributes that a user creates on a service.
        struct Spec {

            /// The list of ports that are exposed by this service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            ports: optional list-map(value: Port, keys: [.port, .protocol]),

            /// Route service traffic to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types ClusterIP, NodePort, and LoadBalancer. Ignored if type is ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/
            selector: optional simple-map(key: string, value: string),

            /// clusterIP is the IP address of the service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be blank) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address. Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            clusterIP: optional string,

            /// ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are "None", empty string (""), or a valid IP address.  Setting this to "None" makes a "headless service" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.
            ///  Unless the "IPv6DualStack" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            clusterIPs: optional list(value: string),

            /// type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is "None", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. "NodePort" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. "LoadBalancer" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. "ExternalName" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types
            type: optional Type,

            /// externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.
            externalIPs: optional list(value: string),

            /// Supports "ClientIP" and "None". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies
            sessionAffinity: optional Affinity,
            enum Affinity {
               ClientIP, None
            }

            /// Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.
            loadBalancerIP: optional string,

            /// If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/configure-cloud-provider-firewall/
            loadBalancerSourceRanges: optional list(value: string),

            /// externalName is the external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved.  Must be a lowercase RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires Type to be
            externalName: optional string,

            /// externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. "Local" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. "Cluster" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.
            externalTrafficPolicy: optional ExternalTrafficPolicyType,
            enum ExternalTrafficPolicyType {
               Local, Cluster 
            }

            /// healthCheckNodePort specifies the healthcheck nodePort for the service. This only applies when type is set to LoadBalancer and externalTrafficPolicy is set to Local. If a value is specified, is in-range, and is not in use, it will be used.  If not specified, a value will be automatically allocated.  External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).
            healthCheckNodePort: optional int32,

            /// publishNotReadyAddresses indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered "ready" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.
            publishNotReadyAddresses: optional bool,

            /// sessionAffinityConfig contains the configurations of session affinity.
            sessionAffinityConfig: optional SessionAffinityConfig,

            /// topologyKeys is a preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service, it can not be used at the same time as externalTrafficPolicy=Local. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value "*" may be used to mean "any topology". This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the ServiceTopology feature. This field is deprecated and will be removed in a future version.
            topologyKeys: optional list(value: string),

            /// IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the "IPv6DualStack" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are "IPv4" and "IPv6".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to "headless" services.  This field will be wiped when updating a Service to type ExternalName.
            ///  This field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.
            @go::name(name: "IPFamilies")
            ipFamilies: optional list(value: IPFamily),

            /// IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the "IPv6DualStack" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be "SingleStack" (a single IP family), "PreferDualStack" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or "RequireDualStack" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.
            @go::name(name: "IPFamilyPolicy")
            ipFamilyPolicy: optional IPFamilyPolicyType,

            /// allocateLoadBalancerNodePorts defines if NodePorts will be automatically allocated for services with type LoadBalancer.  Default is "true". It may be set to "false" if the cluster load-balancer does not rely on NodePorts. allocateLoadBalancerNodePorts may only be set for services with type LoadBalancer and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the ServiceLBNodePortControl feature.
            allocateLoadBalancerNodePorts: optional bool,

            /// IPFamily represents the IP Family (IPv4 or IPv6). This type is used to express the family of an IP expressed by a type (e.g. service.spec.ipFamilies).
            enum IPFamily {
               IPv4, IPv6 
            }

            /// IPFamilyPolicyType represents the dual-stack-ness requested or required by a Service
            enum IPFamilyPolicyType {
                SingleStack, PreferDualStack, RequireDualStack 
            }

            /// ServicePort contains information on service's port.
            struct Port {

                /// The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. When considering the endpoints for a Service, this must match the 'name' field in the EndpointPort. Optional if only one ServicePort is defined on this service.
                name: optional string,

                /// The IP protocol for this port. Supports "TCP", "UDP", and "SCTP". Default is TCP.
                protocol: optional Protocol,

                /// The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as mycompany.com/my-custom-protocol. This is a beta field that is guarded by the ServiceAppProtocol feature gate and enabled by default.
                appProtocol: optional string,

                /// The port that will be exposed by this service.
                port: int32,

                /// Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service
                targetPort: optional int-or-string,

                /// The port on each node on which this service is exposed when type is NodePort or LoadBalancer.  Usually assigned by the system. If a value is specified, in-range, and not in use it will be used, otherwise the operation will fail.  If not specified, a port will be allocated if this Service requires one.  If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport
                nodePort: optional int32,
            }

            /// SessionAffinityConfig represents the configurations of session affinity.
            struct SessionAffinityConfig {

                /// clientIP contains the configurations of Client IP based session affinity.
                clientIP: optional ClientIPConfig,

                /// ClientIPConfig represents the configurations of Client IP based session affinity.
                struct ClientIPConfig {

                    /// timeoutSeconds specifies the seconds of ClientIP type session sticky time. The value must be >0 && <=86400(for 1 day) if ServiceAffinity == "ClientIP". Default value is 10800(for 3 hours).
                    timeoutSeconds: optional int32,
                }
            }

            /// Service Type string describes ingress methods for a service
            enum Type {
               ClusterIP, NodePort, LoadBalancer, None 
            }
        }

        /// ServiceStatus represents the current status of a service.
        struct Status {

            /// LoadBalancer contains the current status of the load-balancer, if one is present.
            loadBalancer: optional LoadBalancerStatus,

            /// Current service state
            conditions: optional list-map(value: meta.k8s.io/v1::Condition, keys: [.type]),

            /// LoadBalancerStatus represents the status of a load-balancer.
            struct LoadBalancerStatus {

                /// Ingress is a list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.
                ingress: optional list(value: LoadBalancerIngress),

                /// LoadBalancerIngress represents the status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.
                struct LoadBalancerIngress {

                    /// IP is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)
                    @go::name(name: "IP")
                    ip: optional string,

                    /// Hostname is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)
                    hostname: optional string,

                    /// Ports is a list of records of service ports If used, every port defined in the service should have an entry in it
                    ports: optional list(value: PortStatus),
                    struct PortStatus {

                        /// Port is the port number of the service port of which status is recorded here
                        port: int32,

                        /// Protocol is the protocol of the service port of which status is recorded here The supported values are: "TCP", "UDP", "SCTP"
                        protocol: Protocol,

                        /// Error is to record the problem with the service port The format of the error shall comply with the following rules: - built-in error values shall be specified in this file and those shall use   CamelCase names - cloud provider specific error values must have names that comply with the   format foo.example.com/CamelCase. --- The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                        error: optional string,
                    }
                }
            }
        }
    }

    /// ServiceAccount binds together: * a name, understood by users, and perhaps by peripheral systems, for an identity * a principal that can be authenticated and authorized * a set of secrets
    kind ServiceAccount {

        /// Secrets is the list of secrets allowed to be used by pods running using this ServiceAccount. More info: https://kubernetes.io/docs/concepts/configuration/secret
        secrets: optional list-map(value: ObjectReference, keys: [.name]),

        /// ImagePullSecrets is a list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet. More info: https://kubernetes.io/docs/concepts/containers/images/#specifying-imagepullsecrets-on-a-pod
        imagePullSecrets: optional list(value: LocalObjectReference),

        /// AutomountServiceAccountToken indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.
        automountServiceAccountToken: optional bool,
    }

    // miscellaneous types

    enum ConditionStatus {
        True, False, Unknown
    }

    /// LocalObjectReference contains enough information to let you locate the referenced object inside the same namespace.
    struct LocalObjectReference {

        /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names TODO: Add other useful fields. apiVersion, kind, uid?
        name: optional string,
    }

    /// ObjectReference contains enough information to let you inspect or modify the referred object. --- New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.  1. Ignored fields.  It includes many fields which are not generally honored.  For instance, ResourceVersion and FieldPath are both very rarely valid in actual usage.  2. Invalid usage help.  It is impossible to add specific help for individual usage.  In most embedded usages, there are particular     restrictions like, "must refer only to types A and B" or "UID not honored" or "name must be restricted".     Those cannot be well described when embedded.  3. Inconsistent validation.  Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.  4. The fields are both imprecise and overly precise.  Kind is not a precise mapping to a URL. This can produce ambiguity     during interpretation and require a REST mapping.  In most cases, the dependency is on the group,resource tuple     and the version of the actual struct is irrelevant.  5. We cannot easily change it.  Because this type is embedded in many locations, updates to this type     will affect numerous schemas.  Don't make new APIs embed an underspecified API type they do not control. Instead of using this type, create a locally provided and used type that is well-focused on your reference. For example, ServiceReferences for admission registration: https://github.com/kubernetes/api/blob/release-1.17/admissionregistration/v1/types.go#L533 .
    struct ObjectReference {

        /// Kind of the referent. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds
        kind: optional string,

        /// Namespace of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/namespaces/
        namespace: optional string,

        /// Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
        name: optional string,

        /// UID of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#uids
        @go::name(name: "UID")
        uid: optional __types/__v1::UID,

        /// API version of the referent.
        @go::name(name: "APIVersion")
        apiVersion: optional string,

        /// Specific resourceVersion to which this reference is made, if any. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#concurrency-control-and-consistency
        resourceVersion: optional string,

        /// If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: "spec.containers{name}" (where "name" refers to the name of the container that triggered the event) or if no container name is specified "spec.containers[2]" (container with index 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object. TODO: this design is not final and this field is subject to change in the future.
        fieldPath: optional string,
    }

    /// Protocol defines network protocols supported for things like container ports.
    enum Protocol {
        TCP, UDP, SCTP        
    }

    /// ResourceList is a set of (resource name, quantity) pairs.
    newtype ResourceList: simple-map(key: ResourceName, value: quantity)

    /// ResourceName is the name identifying various resources in a ResourceList.
    newtype ResourceName: string

    /// ResourceRequirements describes the compute resource requirements.
    struct ResourceRequirements {

        /// Limits describes the maximum amount of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        limits: optional ResourceList,

        /// Requests describes the minimum amount of compute resources required. If Requests is omitted for a container, it defaults to Limits if that is explicitly specified, otherwise to an implementation-defined value. More info: https://kubernetes.io/docs/concepts/configuration/manage-compute-resources-container/
        requests: optional ResourceList,
    }


    enum TaintEffect {
        NoSchedule, PreferNoSchedule, NoExecute 
    }

    /// Binding ties one object to another; for example, a pod is bound to a node by a scheduler. Deprecated in 1.7, please use the bindings subresource of pods instead.
    kind Binding {

        /// The target object that you want to bind to the standard object.
        target: ObjectReference,
    }

    // extra volume sources that are shared between PVs and PVCs

    /// Represents a Persistent Disk resource in AWS.
    ///  An AWS EBS disk must exist before mounting to a container. The disk must also be in the same AWS zone as the kubelet. An AWS EBS disk can only be mounted as read/write once. AWS EBS volumes support ownership management and SELinux relabeling.
    struct AWSElasticBlockStoreVolumeSource {

        /// Unique ID of the persistent disk resource in AWS (Amazon EBS volume). More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        volumeID: string,

        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore TODO: how do we prevent errors in the filesystem from compromising the machine
        @go::name(name: "FSType")
        fsType: optional string,

        /// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty).
        partition: optional int32,

        /// Specify "true" to force and set the ReadOnly property in VolumeMounts to "true". If omitted, the default is "false". More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore
        readOnly: optional bool,
    }

    /// AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod.
    struct AzureDiskVolumeSource {

        /// The Name of the data disk in the blob storage
        diskName: string,

        /// The URI the data disk in the blob storage
        @go::name(name: "DataDiskURI")
        diskURI: string,

        /// Host Caching mode: None, Read Only, Read Write.
        cachingMode: optional CachingMode,
        enum CachingMode {
            None, ReadOnly, ReadWrite
        }

        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        @go::name(name: "FSType")
        fsType: optional string,

        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        readOnly: optional bool,

        /// Expected values Shared: multiple blob disks per storage account  Dedicated: single blob disk per storage account  Managed: azure managed data disk (only in managed availability set). defaults to shared
        kind: optional Kind,
        enum Kind {
            Shared, Dedicated, Managed
        }
    }

    /// Represents a Fibre Channel volume. Fibre Channel volumes can only be mounted as read/write once. Fibre Channel volumes support ownership management and SELinux relabeling.
    struct FCVolumeSource {

        /// Optional: FC target worldwide names (WWNs)
        targetWWNs: optional list(value: string),

        /// Optional: FC target lun number
        lun: optional int32,

        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. TODO: how do we prevent errors in the filesystem from compromising the machine
        @go::name(name: "FSType")
        fsType: optional string,

        /// Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        readOnly: optional bool,

        /// Optional: FC volume world wide identifiers (wwids) Either wwids or combination of targetWWNs and lun must be set, but not both simultaneously.
        @go::name(name: "WWIDs")
        wwids: optional list(value: string),
    }

    /// Represents a Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.
    struct FlockerVolumeSource {

        /// Name of the dataset stored as metadata -> name on the dataset for Flocker should be considered as deprecated
        datasetName: optional string,

        /// UUID of the dataset. This is unique identifier of a Flocker dataset
        datasetUUID: optional string,
    }

    /// Represents a Persistent Disk resource in Google Compute Engine.
    ///  A GCE PD must exist before mounting to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as read/write once or read-only many times. GCE PDs support ownership management and SELinux relabeling.
    struct GCEPersistentDiskVolumeSource {

        /// Unique name of the PD resource in GCE. Used to identify the disk in GCE. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        @go::name(name: "PDName")
        pdName: string,

        /// Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk TODO: how do we prevent errors in the filesystem from compromising the machine
        @go::name(name: "FSType")
        fsType: optional string,

        /// The partition in the volume that you want to mount. If omitted, the default is to mount by volume name. Examples: For volume /dev/sda1, you specify the partition as "1". Similarly, the volume partition for /dev/sda is "0" (or you can leave the property empty). More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        partition: optional int32,

        /// ReadOnly here will force the ReadOnly setting in VolumeMounts. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk
        readOnly: optional bool,
    }

    /// Represents a host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.
    struct HostPathVolumeSource {

        /// Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        path: string,

        /// Type for HostPath Volume Defaults to "" More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath
        type: optional HostPathType,
        enum HostPathType {
            DirectoryOrCreate,
            Directory,
            FileOrCreate,
            File,
            Socket,
            CharDevice,
            BlockDevice
        }
    }

    /// Represents a Photon Controller persistent disk resource.
    struct PhotonPersistentDiskVolumeSource {

        /// ID that identifies Photon Controller persistent disk
        pdID: string,

        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        @go::name(name: "FSType")
        fsType: optional string,
    }

    /// PortworxVolumeSource represents a Portworx volume resource.
    struct PortworxVolumeSource {

        /// VolumeID uniquely identifies a Portworx volume
        volumeID: string,

        /// FSType represents the filesystem type to mount Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs". Implicitly inferred to be "ext4" if unspecified.
        @go::name(name: "FSType")
        fsType: optional string,

        /// Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.
        readOnly: optional bool,
    }

    /// Represents a Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.
    struct QuobyteVolumeSource {

        /// Registry represents a single or multiple Quobyte Registry services specified as a string as host:port pair (multiple entries are separated with commas) which acts as the central registry for volumes
        registry: string,

        /// Volume is a string that references an already created Quobyte volume by name.
        volume: string,

        /// ReadOnly here will force the Quobyte volume to be mounted with read-only permissions. Defaults to false.
        readOnly: optional bool,

        /// User to map volume access to Defaults to serivceaccount user
        user: optional string,

        /// Group to map volume access to Default is no group
        group: optional string,

        /// Tenant owning the given Quobyte volume in the Backend Used with dynamically provisioned Quobyte volumes, value is set by the plugin
        tenant: optional string,
    }

    /// Represents a vSphere volume resource.
    struct VsphereVirtualDiskVolumeSource {

        /// Path that identifies vSphere volume vmdk
        volumePath: string,

        /// Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. "ext4", "xfs", "ntfs". Implicitly inferred to be "ext4" if unspecified.
        @go::name(name: "FSType")
        fsType: optional string,

        /// Storage Policy Based Management (SPBM) profile name.
        storagePolicyName: optional string,

        /// Storage Policy Based Management (SPBM) profile ID associated with the StoragePolicyName.
        storagePolicyID: optional string,
    }

    /// Represents an NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.
    struct NFSVolumeSource {

        /// Server is the hostname or IP address of the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        server: string,

        /// Path that is exported by the NFS server. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        path: string,

        /// ReadOnly here will force the NFS export to be mounted with read-only permissions. Defaults to false. More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs
        readOnly: optional bool,
    }
}

// Author's Note: the following were not auto-imported, because they're never referenced in a kind here:
// 
// - TopologySelector*
// - AvoidPods, PreferPods, Entry, PodSignature
// - NodeResources
//
// The following were not auto-imported because the import tool doesn't pick up non-persistent
// kinds currently:
//
// - Options-related stuff
