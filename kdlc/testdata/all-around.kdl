// double slashes add comments
/* same with block comments */

// Triple-slash comments denote documentation
// If a line contains `# Words`, the following lines
// will be placed in the corresponding OpenAPI documentation
// field.
/* same with block comments */

/// core/v1 describes core k8s concepts
group-version(group:"core", version:"v1") {
	/// Pod is a group of related, colocated processes
	///
	/// # Example
	/// apiVersion: v1
	/// kind: Pod
	/// spec: { ... }
	kind Pod {
		// types may be nested -- this is just a convininence for namespacing
		// it does not imply privacy or anything

		spec: Spec,
		struct Spec {
			// list-maps are ordered maps whose keys appear in their body.
			// not specifying a key defaults to `key: name`.
			// Go represets them as lists with specific merge keys, other
			// languages may represent them other ways.
			// They are automatically merged as maps in SMD.

			// optional fields must list the keyword `optional` before the
			// type.

			/// list of volumes that can be mounted by containers belonging to
			/// the pod
			volumes: optional list-map(value: Volume),

			// ...

			/*
			// old default syntax
			// defaults may be specified in the type signature with `[Value]`
			dnsPolicy: optional DNSPolicy [ClusterFirst],
			*/

			dnsPolicy: optional(default: ClusterFirst) DNSPolicy,

			// simple-maps are unordered maps from string-type values to
			// primitive values
			nodeSelector: optional simple-map(value: string),

			// ...

			@deprecated(msg: "use serviceAccountName instead")
			serviceAccount: optional string,

			// ...

			readinessGates: optional list(value: ReadinessGate),
			struct ReadinessGate { }

			// create-only fields are immutable after creation (see immutability KEP)
			containers: create-only list-map(value: Container),
			struct Container {
				// ...
			}
		}

		status: Status,

		struct Status {

		}
	}

	newtype DNSLabel: string as(format: "dns-label");

	struct Volume {
		name: DNSLabel,
		source: Source,

		// unions contain several variations, only one of which
		// may be set at any given time.  By default, they have
		// a tag of `type`.
		// If a variant has no body, simply don't specify a tag.
		union Source {
			hostPath: HostPath,
			struct HostPath {
				path: string,
			}
			emptyDir: EmptyDir,
			struct EmptyDir {}
			// ...
		}
	}

	// enums represent one choice of a series of constant string values
	enum DNSPolicy {
		ClusterFirstWithHostNet,
		ClusterFirst,
		Default,
		//None, // TODO: trailing comma
		None
	}

	struct SecretProjection {
		// inline fields have their fields embedded in their parent object
		// in systems where this is supported (e.g. JSON, Go).  In systems
		// where not supported, generally just use the type name as the field
		// name.  Only structs and unions may be inlined.
        
        // "raw identifiers" are surrounded with backticks, and take two purposes
        // the first is to allow fields and keys that have the same name as keywords
        // (like below).
        //
        // The second is as an emergency "break glass" to violate the "field name must
        // have an lowercase first letter" constraint.
		@reference(group: "v1", version: "core", `kind`: "Secret")
		_inline: LocalObjectReference,
	}

	@reference(same-namespace: true)
	struct LocalObjectReference {
		// fields are referenced using `.name`
		// (this avoids parsing ambiguities with primitive type names)

		@reference-part(part: .name)
		name: string,
	}

}

/*
// TODO
groupVersion(group: "apiextensions", version: "v1") {
    // some unions have variants without bodies

    union CustomResourceConversion(tag: "strategy") {
        webhook: Webhook,
        struct Webhook {},

		// this variant only has a tag value, no body
        None,
    }
}
*/
