// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: markers.proto

package markers

import (
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_struct "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	constraints "k8s.io/idl/ckdl-ir/goir/constraints"
	types "k8s.io/idl/ckdl-ir/goir/types"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type TypePrimitive int32

const (
	TypePrimitive_FIELD_PATH TypePrimitive = 0
	TypePrimitive_TYPE       TypePrimitive = 1
)

// Enum value maps for TypePrimitive.
var (
	TypePrimitive_name = map[int32]string{
		0: "FIELD_PATH",
		1: "TYPE",
	}
	TypePrimitive_value = map[string]int32{
		"FIELD_PATH": 0,
		"TYPE":       1,
	}
)

func (x TypePrimitive) Enum() *TypePrimitive {
	p := new(TypePrimitive)
	*p = x
	return p
}

func (x TypePrimitive) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TypePrimitive) Descriptor() protoreflect.EnumDescriptor {
	return file_markers_proto_enumTypes[0].Descriptor()
}

func (TypePrimitive) Type() protoreflect.EnumType {
	return &file_markers_proto_enumTypes[0]
}

func (x TypePrimitive) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TypePrimitive.Descriptor instead.
func (TypePrimitive) EnumDescriptor() ([]byte, []int) {
	return file_markers_proto_rawDescGZIP(), []int{0}
}

type MarkerDef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Fields     []*MarkerField       `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
	Docs       *types.Documentation `protobuf:"bytes,15,opt,name=docs,proto3" json:"docs,omitempty"`
	Attributes []*any.Any           `protobuf:"bytes,2047,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *MarkerDef) Reset() {
	*x = MarkerDef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markers_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkerDef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkerDef) ProtoMessage() {}

func (x *MarkerDef) ProtoReflect() protoreflect.Message {
	mi := &file_markers_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkerDef.ProtoReflect.Descriptor instead.
func (*MarkerDef) Descriptor() ([]byte, []int) {
	return file_markers_proto_rawDescGZIP(), []int{0}
}

func (x *MarkerDef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarkerDef) GetFields() []*MarkerField {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *MarkerDef) GetDocs() *types.Documentation {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *MarkerDef) GetAttributes() []*any.Any {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Type struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Type:
	//	*Type_Primitive
	//	*Type_TypePrimitive
	//	*Type_List
	//	*Type_Map
	//	*Type_NamedType
	Type isType_Type `protobuf_oneof:"type"`
}

func (x *Type) Reset() {
	*x = Type{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markers_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Type) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Type) ProtoMessage() {}

func (x *Type) ProtoReflect() protoreflect.Message {
	mi := &file_markers_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Type.ProtoReflect.Descriptor instead.
func (*Type) Descriptor() ([]byte, []int) {
	return file_markers_proto_rawDescGZIP(), []int{1}
}

func (m *Type) GetType() isType_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Type) GetPrimitive() *types.Primitive {
	if x, ok := x.GetType().(*Type_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (x *Type) GetTypePrimitive() TypePrimitive {
	if x, ok := x.GetType().(*Type_TypePrimitive); ok {
		return x.TypePrimitive
	}
	return TypePrimitive_FIELD_PATH
}

func (x *Type) GetList() *List {
	if x, ok := x.GetType().(*Type_List); ok {
		return x.List
	}
	return nil
}

func (x *Type) GetMap() *Map {
	if x, ok := x.GetType().(*Type_Map); ok {
		return x.Map
	}
	return nil
}

func (x *Type) GetNamedType() *Reference {
	if x, ok := x.GetType().(*Type_NamedType); ok {
		return x.NamedType
	}
	return nil
}

type isType_Type interface {
	isType_Type()
}

type Type_Primitive struct {
	Primitive *types.Primitive `protobuf:"bytes,5,opt,name=primitive,proto3,oneof"`
}

type Type_TypePrimitive struct {
	TypePrimitive TypePrimitive `protobuf:"varint,6,opt,name=type_primitive,json=typePrimitive,proto3,enum=kb.ir.markers.TypePrimitive,oneof"`
}

type Type_List struct {
	List *List `protobuf:"bytes,8,opt,name=list,proto3,oneof"`
}

type Type_Map struct {
	Map *Map `protobuf:"bytes,9,opt,name=map,proto3,oneof"`
}

type Type_NamedType struct {
	NamedType *Reference `protobuf:"bytes,10,opt,name=named_type,json=namedType,proto3,oneof"`
}

func (*Type_Primitive) isType_Type() {}

func (*Type_TypePrimitive) isType_Type() {}

func (*Type_List) isType_Type() {}

func (*Type_Map) isType_Type() {}

func (*Type_NamedType) isType_Type() {}

type MarkerField struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name     string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Optional bool                 `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
	Type     *Type                `protobuf:"bytes,3,opt,name=type,proto3" json:"type,omitempty"`
	Default  *_struct.Value       `protobuf:"bytes,14,opt,name=default,proto3" json:"default,omitempty"`
	Docs     *types.Documentation `protobuf:"bytes,15,opt,name=docs,proto3" json:"docs,omitempty"`
	ProtoTag uint32               `protobuf:"varint,16,opt,name=proto_tag,json=protoTag,proto3" json:"proto_tag,omitempty"`
	// TODO: attributes elsewhere
	// extra info carried for backend-specific data (e.g. lang-specific extensions, etc)
	Attributes []*any.Any `protobuf:"bytes,2047,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *MarkerField) Reset() {
	*x = MarkerField{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markers_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MarkerField) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MarkerField) ProtoMessage() {}

func (x *MarkerField) ProtoReflect() protoreflect.Message {
	mi := &file_markers_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MarkerField.ProtoReflect.Descriptor instead.
func (*MarkerField) Descriptor() ([]byte, []int) {
	return file_markers_proto_rawDescGZIP(), []int{2}
}

func (x *MarkerField) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MarkerField) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *MarkerField) GetType() *Type {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *MarkerField) GetDefault() *_struct.Value {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *MarkerField) GetDocs() *types.Documentation {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *MarkerField) GetProtoTag() uint32 {
	if x != nil {
		return x.ProtoTag
	}
	return 0
}

func (x *MarkerField) GetAttributes() []*any.Any {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Items              *Type                `protobuf:"bytes,1,opt,name=items,proto3" json:"items,omitempty"`
	UniqueItems        bool                 `protobuf:"varint,10,opt,name=unique_items,json=uniqueItems,proto3" json:"unique_items,omitempty"` // normally covered by set, so not in the constraints
	GeneralConstraints *constraints.General `protobuf:"bytes,11,opt,name=general_constraints,json=generalConstraints,proto3" json:"general_constraints,omitempty"`
	ListConstraints    *constraints.List    `protobuf:"bytes,12,opt,name=list_constraints,json=listConstraints,proto3" json:"list_constraints,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markers_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_markers_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_markers_proto_rawDescGZIP(), []int{3}
}

func (x *List) GetItems() *Type {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *List) GetUniqueItems() bool {
	if x != nil {
		return x.UniqueItems
	}
	return false
}

func (x *List) GetGeneralConstraints() *constraints.General {
	if x != nil {
		return x.GeneralConstraints
	}
	return nil
}

func (x *List) GetListConstraints() *constraints.List {
	if x != nil {
		return x.ListConstraints
	}
	return nil
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name        string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Constraints *constraints.Any `protobuf:"bytes,10,opt,name=constraints,proto3" json:"constraints,omitempty"` // only local references for now
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markers_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_markers_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_markers_proto_rawDescGZIP(), []int{4}
}

func (x *Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reference) GetConstraints() *constraints.Any {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type Map struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Values             *Type                `protobuf:"bytes,1,opt,name=values,proto3" json:"values,omitempty"`
	GeneralConstraints *constraints.General `protobuf:"bytes,10,opt,name=general_constraints,json=generalConstraints,proto3" json:"general_constraints,omitempty"`
	ObjectConstraints  *constraints.Object  `protobuf:"bytes,11,opt,name=object_constraints,json=objectConstraints,proto3" json:"object_constraints,omitempty"`
}

func (x *Map) Reset() {
	*x = Map{}
	if protoimpl.UnsafeEnabled {
		mi := &file_markers_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Map) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Map) ProtoMessage() {}

func (x *Map) ProtoReflect() protoreflect.Message {
	mi := &file_markers_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Map.ProtoReflect.Descriptor instead.
func (*Map) Descriptor() ([]byte, []int) {
	return file_markers_proto_rawDescGZIP(), []int{5}
}

func (x *Map) GetValues() *Type {
	if x != nil {
		return x.Values
	}
	return nil
}

func (x *Map) GetGeneralConstraints() *constraints.General {
	if x != nil {
		return x.GeneralConstraints
	}
	return nil
}

func (x *Map) GetObjectConstraints() *constraints.Object {
	if x != nil {
		return x.ObjectConstraints
	}
	return nil
}

var File_markers_proto protoreflect.FileDescriptor

var file_markers_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0d, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x1a, 0x19,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x61, 0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xba, 0x01, 0x0a, 0x09, 0x4d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69,
	0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62,
	0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x35, 0x0a,
	0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xff, 0x0f, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x73, 0x22, 0x9b, 0x02, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x45, 0x0a, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e,
	0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x29, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x62, 0x2e,
	0x69, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x03, 0x6d, 0x61, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x6d, 0x61, 0x72,
	0x6b, 0x65, 0x72, 0x73, 0x2e, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x12,
	0x39, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b,
	0x65, 0x72, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52,
	0x09, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x0b, 0x4d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x12, 0x27, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73,
	0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a,
	0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62,
	0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x1b, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x61, 0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61, 0x67, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xff, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xe5, 0x01, 0x0a, 0x04, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x29, 0x0a, 0x05, 0x69, 0x74,
	0x65, 0x6d, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x62, 0x2e, 0x69,
	0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x05,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f,
	0x69, 0x74, 0x65, 0x6d, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x75, 0x6e, 0x69,
	0x71, 0x75, 0x65, 0x49, 0x74, 0x65, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x59, 0x0a, 0x09, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x22, 0xc9, 0x01, 0x0a, 0x03, 0x4d, 0x61, 0x70, 0x12, 0x2b, 0x0a, 0x06,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b,
	0x62, 0x2e, 0x69, 0x72, 0x2e, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x67, 0x65, 0x6e,
	0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72,
	0x61, 0x6c, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x6f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x2a, 0x29, 0x0a, 0x0d, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x50, 0x41, 0x54, 0x48, 0x10,
	0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x59, 0x50, 0x45, 0x10, 0x01, 0x42, 0x21, 0x5a, 0x1f, 0x6b,
	0x38, 0x73, 0x2e, 0x69, 0x6f, 0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6b, 0x64, 0x6c, 0x2d, 0x69,
	0x72, 0x2f, 0x67, 0x6f, 0x69, 0x72, 0x2f, 0x6d, 0x61, 0x72, 0x6b, 0x65, 0x72, 0x73, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_markers_proto_rawDescOnce sync.Once
	file_markers_proto_rawDescData = file_markers_proto_rawDesc
)

func file_markers_proto_rawDescGZIP() []byte {
	file_markers_proto_rawDescOnce.Do(func() {
		file_markers_proto_rawDescData = protoimpl.X.CompressGZIP(file_markers_proto_rawDescData)
	})
	return file_markers_proto_rawDescData
}

var file_markers_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_markers_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_markers_proto_goTypes = []interface{}{
	(TypePrimitive)(0),          // 0: kb.ir.markers.TypePrimitive
	(*MarkerDef)(nil),           // 1: kb.ir.markers.MarkerDef
	(*Type)(nil),                // 2: kb.ir.markers.Type
	(*MarkerField)(nil),         // 3: kb.ir.markers.MarkerField
	(*List)(nil),                // 4: kb.ir.markers.List
	(*Reference)(nil),           // 5: kb.ir.markers.Reference
	(*Map)(nil),                 // 6: kb.ir.markers.Map
	(*types.Documentation)(nil), // 7: kb.ir.types.Documentation
	(*any.Any)(nil),             // 8: google.protobuf.Any
	(*types.Primitive)(nil),     // 9: kb.ir.types.Primitive
	(*_struct.Value)(nil),       // 10: google.protobuf.Value
	(*constraints.General)(nil), // 11: kb.ir.constraints.General
	(*constraints.List)(nil),    // 12: kb.ir.constraints.List
	(*constraints.Any)(nil),     // 13: kb.ir.constraints.Any
	(*constraints.Object)(nil),  // 14: kb.ir.constraints.Object
}
var file_markers_proto_depIdxs = []int32{
	3,  // 0: kb.ir.markers.MarkerDef.fields:type_name -> kb.ir.markers.MarkerField
	7,  // 1: kb.ir.markers.MarkerDef.docs:type_name -> kb.ir.types.Documentation
	8,  // 2: kb.ir.markers.MarkerDef.attributes:type_name -> google.protobuf.Any
	9,  // 3: kb.ir.markers.Type.primitive:type_name -> kb.ir.types.Primitive
	0,  // 4: kb.ir.markers.Type.type_primitive:type_name -> kb.ir.markers.TypePrimitive
	4,  // 5: kb.ir.markers.Type.list:type_name -> kb.ir.markers.List
	6,  // 6: kb.ir.markers.Type.map:type_name -> kb.ir.markers.Map
	5,  // 7: kb.ir.markers.Type.named_type:type_name -> kb.ir.markers.Reference
	2,  // 8: kb.ir.markers.MarkerField.type:type_name -> kb.ir.markers.Type
	10, // 9: kb.ir.markers.MarkerField.default:type_name -> google.protobuf.Value
	7,  // 10: kb.ir.markers.MarkerField.docs:type_name -> kb.ir.types.Documentation
	8,  // 11: kb.ir.markers.MarkerField.attributes:type_name -> google.protobuf.Any
	2,  // 12: kb.ir.markers.List.items:type_name -> kb.ir.markers.Type
	11, // 13: kb.ir.markers.List.general_constraints:type_name -> kb.ir.constraints.General
	12, // 14: kb.ir.markers.List.list_constraints:type_name -> kb.ir.constraints.List
	13, // 15: kb.ir.markers.Reference.constraints:type_name -> kb.ir.constraints.Any
	2,  // 16: kb.ir.markers.Map.values:type_name -> kb.ir.markers.Type
	11, // 17: kb.ir.markers.Map.general_constraints:type_name -> kb.ir.constraints.General
	14, // 18: kb.ir.markers.Map.object_constraints:type_name -> kb.ir.constraints.Object
	19, // [19:19] is the sub-list for method output_type
	19, // [19:19] is the sub-list for method input_type
	19, // [19:19] is the sub-list for extension type_name
	19, // [19:19] is the sub-list for extension extendee
	0,  // [0:19] is the sub-list for field type_name
}

func init() { file_markers_proto_init() }
func file_markers_proto_init() {
	if File_markers_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_markers_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkerDef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markers_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Type); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markers_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MarkerField); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markers_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markers_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_markers_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Map); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_markers_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*Type_Primitive)(nil),
		(*Type_TypePrimitive)(nil),
		(*Type_List)(nil),
		(*Type_Map)(nil),
		(*Type_NamedType)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_markers_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_markers_proto_goTypes,
		DependencyIndexes: file_markers_proto_depIdxs,
		EnumInfos:         file_markers_proto_enumTypes,
		MessageInfos:      file_markers_proto_msgTypes,
	}.Build()
	File_markers_proto = out.File
	file_markers_proto_rawDesc = nil
	file_markers_proto_goTypes = nil
	file_markers_proto_depIdxs = nil
}
