// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: types.proto

package types

import (
	proto "github.com/golang/protobuf/proto"
	any "github.com/golang/protobuf/ptypes/any"
	_struct "github.com/golang/protobuf/ptypes/struct"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	constraints "k8s.io/idl/ckdl-ir/goir/constraints"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type Primitive_Type int32

const (
	Primitive_STRING Primitive_Type = 0
	// TODO: unify these two and rely on validation/constraints to hint?
	// TODO: if we don't unify, we need to also have unsigned variants
	Primitive_LEGACYINT32   Primitive_Type = 1
	Primitive_INT64         Primitive_Type = 2
	Primitive_BOOL          Primitive_Type = 3
	Primitive_TIME          Primitive_Type = 4
	Primitive_DURATION      Primitive_Type = 5
	Primitive_QUANTITY      Primitive_Type = 6
	Primitive_BYTES         Primitive_Type = 7
	Primitive_LEGACYFLOAT64 Primitive_Type = 8
)

// Enum value maps for Primitive_Type.
var (
	Primitive_Type_name = map[int32]string{
		0: "STRING",
		1: "LEGACYINT32",
		2: "INT64",
		3: "BOOL",
		4: "TIME",
		5: "DURATION",
		6: "QUANTITY",
		7: "BYTES",
		8: "LEGACYFLOAT64",
	}
	Primitive_Type_value = map[string]int32{
		"STRING":        0,
		"LEGACYINT32":   1,
		"INT64":         2,
		"BOOL":          3,
		"TIME":          4,
		"DURATION":      5,
		"QUANTITY":      6,
		"BYTES":         7,
		"LEGACYFLOAT64": 8,
	}
)

func (x Primitive_Type) Enum() *Primitive_Type {
	p := new(Primitive_Type)
	*p = x
	return p
}

func (x Primitive_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Primitive_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (Primitive_Type) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x Primitive_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Primitive_Type.Descriptor instead.
func (Primitive_Type) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7, 0}
}

type Documentation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Description string `protobuf:"bytes,1,opt,name=description,proto3" json:"description,omitempty"`
	Example     string `protobuf:"bytes,2,opt,name=example,proto3" json:"example,omitempty"` // TODO: actually bother serializing as JSON?
	ExternalRef string `protobuf:"bytes,3,opt,name=external_ref,json=externalRef,proto3" json:"external_ref,omitempty"`
}

func (x *Documentation) Reset() {
	*x = Documentation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Documentation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Documentation) ProtoMessage() {}

func (x *Documentation) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Documentation.ProtoReflect.Descriptor instead.
func (*Documentation) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *Documentation) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Documentation) GetExample() string {
	if x != nil {
		return x.Example
	}
	return ""
}

func (x *Documentation) GetExternalRef() string {
	if x != nil {
		return x.ExternalRef
	}
	return ""
}

type GroupVersionRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group   string `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Version string `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *GroupVersionRef) Reset() {
	*x = GroupVersionRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GroupVersionRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GroupVersionRef) ProtoMessage() {}

func (x *GroupVersionRef) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GroupVersionRef.ProtoReflect.Descriptor instead.
func (*GroupVersionRef) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *GroupVersionRef) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *GroupVersionRef) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

type Kind struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Object     bool           `protobuf:"varint,3,opt,name=object,proto3" json:"object,omitempty"` // does this contain objectmeta for persistence?
	Fields     []*Field       `protobuf:"bytes,10,rep,name=fields,proto3" json:"fields,omitempty"`
	Docs       *Documentation `protobuf:"bytes,15,opt,name=docs,proto3" json:"docs,omitempty"`
	Attributes []*any.Any     `protobuf:"bytes,2047,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Kind) Reset() {
	*x = Kind{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Kind) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Kind) ProtoMessage() {}

func (x *Kind) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Kind.ProtoReflect.Descriptor instead.
func (*Kind) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *Kind) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Kind) GetObject() bool {
	if x != nil {
		return x.Object
	}
	return false
}

func (x *Kind) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Kind) GetDocs() *Documentation {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Kind) GetAttributes() []*any.Any {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type Struct struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// TODO: embedded
	Fields                []*Field            `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	PreserveUnknownFields bool                `protobuf:"varint,3,opt,name=preserve_unknown_fields,json=preserveUnknownFields,proto3" json:"preserve_unknown_fields,omitempty"`
	IsEmbeddedObject      bool                `protobuf:"varint,4,opt,name=is_embedded_object,json=isEmbeddedObject,proto3" json:"is_embedded_object,omitempty"`
	Constraints           *constraints.Object `protobuf:"bytes,5,opt,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *Struct) Reset() {
	*x = Struct{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Struct) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Struct) ProtoMessage() {}

func (x *Struct) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Struct.ProtoReflect.Descriptor instead.
func (*Struct) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *Struct) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *Struct) GetPreserveUnknownFields() bool {
	if x != nil {
		return x.PreserveUnknownFields
	}
	return false
}

func (x *Struct) GetIsEmbeddedObject() bool {
	if x != nil {
		return x.IsEmbeddedObject
	}
	return false
}

func (x *Struct) GetConstraints() *constraints.Object {
	if x != nil {
		return x.Constraints
	}
	return nil
}

type Field struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Optional        bool   `protobuf:"varint,2,opt,name=optional,proto3" json:"optional,omitempty"`
	ZeroMeansAbsent bool   `protobuf:"varint,3,opt,name=zero_means_absent,json=zeroMeansAbsent,proto3" json:"zero_means_absent,omitempty"` // is the zero-value valid, or does it mean absent?
	Embedded        bool   `protobuf:"varint,4,opt,name=embedded,proto3" json:"embedded,omitempty"`                                        // is embedded in the serialized object -- doesn't have a discrete field name
	// Types that are assignable to Type:
	//	*Field_Primitive
	//	*Field_NamedType
	//	*Field_Set
	//	*Field_List
	//	*Field_PrimitiveMap
	//	*Field_ListMap
	Type     isField_Type   `protobuf_oneof:"type"`
	Default  *_struct.Value `protobuf:"bytes,14,opt,name=default,proto3" json:"default,omitempty"`
	Docs     *Documentation `protobuf:"bytes,15,opt,name=docs,proto3" json:"docs,omitempty"`
	ProtoTag uint32         `protobuf:"varint,16,opt,name=proto_tag,json=protoTag,proto3" json:"proto_tag,omitempty"`
	// TODO: attributes elsewhere
	// extra info carried for backend-specific data (e.g. lang-specific extensions, etc)
	Attributes []*any.Any `protobuf:"bytes,2047,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Field) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Field) ProtoMessage() {}

func (x *Field) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Field.ProtoReflect.Descriptor instead.
func (*Field) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetOptional() bool {
	if x != nil {
		return x.Optional
	}
	return false
}

func (x *Field) GetZeroMeansAbsent() bool {
	if x != nil {
		return x.ZeroMeansAbsent
	}
	return false
}

func (x *Field) GetEmbedded() bool {
	if x != nil {
		return x.Embedded
	}
	return false
}

func (m *Field) GetType() isField_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Field) GetPrimitive() *Primitive {
	if x, ok := x.GetType().(*Field_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (x *Field) GetNamedType() *Reference {
	if x, ok := x.GetType().(*Field_NamedType); ok {
		return x.NamedType
	}
	return nil
}

func (x *Field) GetSet() *Set {
	if x, ok := x.GetType().(*Field_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Field) GetList() *List {
	if x, ok := x.GetType().(*Field_List); ok {
		return x.List
	}
	return nil
}

func (x *Field) GetPrimitiveMap() *PrimitiveMap {
	if x, ok := x.GetType().(*Field_PrimitiveMap); ok {
		return x.PrimitiveMap
	}
	return nil
}

func (x *Field) GetListMap() *ListMap {
	if x, ok := x.GetType().(*Field_ListMap); ok {
		return x.ListMap
	}
	return nil
}

func (x *Field) GetDefault() *_struct.Value {
	if x != nil {
		return x.Default
	}
	return nil
}

func (x *Field) GetDocs() *Documentation {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Field) GetProtoTag() uint32 {
	if x != nil {
		return x.ProtoTag
	}
	return 0
}

func (x *Field) GetAttributes() []*any.Any {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type isField_Type interface {
	isField_Type()
}

type Field_Primitive struct {
	Primitive *Primitive `protobuf:"bytes,5,opt,name=primitive,proto3,oneof"`
}

type Field_NamedType struct {
	NamedType *Reference `protobuf:"bytes,6,opt,name=named_type,json=namedType,proto3,oneof"`
}

type Field_Set struct {
	Set *Set `protobuf:"bytes,7,opt,name=set,proto3,oneof"`
}

type Field_List struct {
	List *List `protobuf:"bytes,8,opt,name=list,proto3,oneof"`
}

type Field_PrimitiveMap struct {
	PrimitiveMap *PrimitiveMap `protobuf:"bytes,9,opt,name=primitive_map,json=primitiveMap,proto3,oneof"`
}

type Field_ListMap struct {
	ListMap *ListMap `protobuf:"bytes,10,opt,name=list_map,json=listMap,proto3,oneof"`
}

func (*Field_Primitive) isField_Type() {}

func (*Field_NamedType) isField_Type() {}

func (*Field_Set) isField_Type() {}

func (*Field_List) isField_Type() {}

func (*Field_PrimitiveMap) isField_Type() {}

func (*Field_ListMap) isField_Type() {}

type Union struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Untagged           bool                 `protobuf:"varint,1,opt,name=untagged,proto3" json:"untagged,omitempty"`
	Tag                string               `protobuf:"bytes,2,opt,name=tag,proto3" json:"tag,omitempty"`
	Variants           []*Field             `protobuf:"bytes,3,rep,name=variants,proto3" json:"variants,omitempty"`
	GeneralConstraints *constraints.General `protobuf:"bytes,10,opt,name=general_constraints,json=generalConstraints,proto3" json:"general_constraints,omitempty"`
	ObjectConstraints  *constraints.Object  `protobuf:"bytes,11,opt,name=object_constraints,json=objectConstraints,proto3" json:"object_constraints,omitempty"`
}

func (x *Union) Reset() {
	*x = Union{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Union) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Union) ProtoMessage() {}

func (x *Union) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Union.ProtoReflect.Descriptor instead.
func (*Union) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *Union) GetUntagged() bool {
	if x != nil {
		return x.Untagged
	}
	return false
}

func (x *Union) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *Union) GetVariants() []*Field {
	if x != nil {
		return x.Variants
	}
	return nil
}

func (x *Union) GetGeneralConstraints() *constraints.General {
	if x != nil {
		return x.GeneralConstraints
	}
	return nil
}

func (x *Union) GetObjectConstraints() *constraints.Object {
	if x != nil {
		return x.ObjectConstraints
	}
	return nil
}

type Reference struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name         string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	GroupVersion *GroupVersionRef `protobuf:"bytes,2,opt,name=group_version,json=groupVersion,proto3" json:"group_version,omitempty"`
	Constraints  *constraints.Any `protobuf:"bytes,10,opt,name=constraints,proto3" json:"constraints,omitempty"`
}

func (x *Reference) Reset() {
	*x = Reference{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Reference) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Reference) ProtoMessage() {}

func (x *Reference) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Reference.ProtoReflect.Descriptor instead.
func (*Reference) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *Reference) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Reference) GetGroupVersion() *GroupVersionRef {
	if x != nil {
		return x.GroupVersion
	}
	return nil
}

func (x *Reference) GetConstraints() *constraints.Any {
	if x != nil {
		return x.Constraints
	}
	return nil
}

// Primitives are types expected to be provided by a support library/language
type Primitive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type               Primitive_Type       `protobuf:"varint,1,opt,name=type,proto3,enum=kb.ir.types.Primitive_Type" json:"type,omitempty"`
	GeneralConstraints *constraints.General `protobuf:"bytes,10,opt,name=general_constraints,json=generalConstraints,proto3" json:"general_constraints,omitempty"`
	// Types that are assignable to SpecificConstraints:
	//	*Primitive_StringConstraints
	//	*Primitive_NumericConstraints
	SpecificConstraints isPrimitive_SpecificConstraints `protobuf_oneof:"specific_constraints"`
}

func (x *Primitive) Reset() {
	*x = Primitive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Primitive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Primitive) ProtoMessage() {}

func (x *Primitive) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Primitive.ProtoReflect.Descriptor instead.
func (*Primitive) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *Primitive) GetType() Primitive_Type {
	if x != nil {
		return x.Type
	}
	return Primitive_STRING
}

func (x *Primitive) GetGeneralConstraints() *constraints.General {
	if x != nil {
		return x.GeneralConstraints
	}
	return nil
}

func (m *Primitive) GetSpecificConstraints() isPrimitive_SpecificConstraints {
	if m != nil {
		return m.SpecificConstraints
	}
	return nil
}

func (x *Primitive) GetStringConstraints() *constraints.String {
	if x, ok := x.GetSpecificConstraints().(*Primitive_StringConstraints); ok {
		return x.StringConstraints
	}
	return nil
}

func (x *Primitive) GetNumericConstraints() *constraints.Numeric {
	if x, ok := x.GetSpecificConstraints().(*Primitive_NumericConstraints); ok {
		return x.NumericConstraints
	}
	return nil
}

type isPrimitive_SpecificConstraints interface {
	isPrimitive_SpecificConstraints()
}

type Primitive_StringConstraints struct {
	StringConstraints *constraints.String `protobuf:"bytes,11,opt,name=string_constraints,json=stringConstraints,proto3,oneof"`
}

type Primitive_NumericConstraints struct {
	NumericConstraints *constraints.Numeric `protobuf:"bytes,12,opt,name=numeric_constraints,json=numericConstraints,proto3,oneof"`
}

func (*Primitive_StringConstraints) isPrimitive_SpecificConstraints() {}

func (*Primitive_NumericConstraints) isPrimitive_SpecificConstraints() {}

type List struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Items:
	//	*List_Primitive
	//	*List_Reference
	Items              isList_Items         `protobuf_oneof:"items"`
	GeneralConstraints *constraints.General `protobuf:"bytes,3,opt,name=general_constraints,json=generalConstraints,proto3" json:"general_constraints,omitempty"`
	ListConstraints    *constraints.List    `protobuf:"bytes,4,opt,name=list_constraints,json=listConstraints,proto3" json:"list_constraints,omitempty"`
}

func (x *List) Reset() {
	*x = List{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *List) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*List) ProtoMessage() {}

func (x *List) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use List.ProtoReflect.Descriptor instead.
func (*List) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (m *List) GetItems() isList_Items {
	if m != nil {
		return m.Items
	}
	return nil
}

func (x *List) GetPrimitive() *Primitive {
	if x, ok := x.GetItems().(*List_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (x *List) GetReference() *Reference {
	if x, ok := x.GetItems().(*List_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *List) GetGeneralConstraints() *constraints.General {
	if x != nil {
		return x.GeneralConstraints
	}
	return nil
}

func (x *List) GetListConstraints() *constraints.List {
	if x != nil {
		return x.ListConstraints
	}
	return nil
}

type isList_Items interface {
	isList_Items()
}

type List_Primitive struct {
	Primitive *Primitive `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}

type List_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"`
}

func (*List_Primitive) isList_Items() {}

func (*List_Reference) isList_Items() {}

type Set struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Items:
	//	*Set_Primitive
	//	*Set_Reference
	Items              isSet_Items          `protobuf_oneof:"items"`
	GeneralConstraints *constraints.General `protobuf:"bytes,10,opt,name=general_constraints,json=generalConstraints,proto3" json:"general_constraints,omitempty"`
	ListConstraints    *constraints.List    `protobuf:"bytes,11,opt,name=list_constraints,json=listConstraints,proto3" json:"list_constraints,omitempty"`
}

func (x *Set) Reset() {
	*x = Set{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Set) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Set) ProtoMessage() {}

func (x *Set) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Set.ProtoReflect.Descriptor instead.
func (*Set) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (m *Set) GetItems() isSet_Items {
	if m != nil {
		return m.Items
	}
	return nil
}

func (x *Set) GetPrimitive() *Primitive {
	if x, ok := x.GetItems().(*Set_Primitive); ok {
		return x.Primitive
	}
	return nil
}

func (x *Set) GetReference() *Reference {
	if x, ok := x.GetItems().(*Set_Reference); ok {
		return x.Reference
	}
	return nil
}

func (x *Set) GetGeneralConstraints() *constraints.General {
	if x != nil {
		return x.GeneralConstraints
	}
	return nil
}

func (x *Set) GetListConstraints() *constraints.List {
	if x != nil {
		return x.ListConstraints
	}
	return nil
}

type isSet_Items interface {
	isSet_Items()
}

type Set_Primitive struct {
	Primitive *Primitive `protobuf:"bytes,1,opt,name=primitive,proto3,oneof"`
}

type Set_Reference struct {
	Reference *Reference `protobuf:"bytes,2,opt,name=reference,proto3,oneof"` // must be a reference to a primitive
}

func (*Set_Primitive) isSet_Items() {}

func (*Set_Reference) isSet_Items() {}

type PrimitiveMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Key:
	//	*PrimitiveMap_PrimitiveKey
	//	*PrimitiveMap_ReferenceKey
	Key isPrimitiveMap_Key `protobuf_oneof:"key"`
	// Types that are assignable to Value:
	//	*PrimitiveMap_PrimitiveValue
	//	*PrimitiveMap_ReferenceValue
	//	*PrimitiveMap_SimpleListValue
	Value              isPrimitiveMap_Value `protobuf_oneof:"value"`
	GeneralConstraints *constraints.General `protobuf:"bytes,10,opt,name=general_constraints,json=generalConstraints,proto3" json:"general_constraints,omitempty"`
	ObjectConstraints  *constraints.Object  `protobuf:"bytes,11,opt,name=object_constraints,json=objectConstraints,proto3" json:"object_constraints,omitempty"`
}

func (x *PrimitiveMap) Reset() {
	*x = PrimitiveMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PrimitiveMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PrimitiveMap) ProtoMessage() {}

func (x *PrimitiveMap) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PrimitiveMap.ProtoReflect.Descriptor instead.
func (*PrimitiveMap) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (m *PrimitiveMap) GetKey() isPrimitiveMap_Key {
	if m != nil {
		return m.Key
	}
	return nil
}

func (x *PrimitiveMap) GetPrimitiveKey() *Primitive {
	if x, ok := x.GetKey().(*PrimitiveMap_PrimitiveKey); ok {
		return x.PrimitiveKey
	}
	return nil
}

func (x *PrimitiveMap) GetReferenceKey() *Reference {
	if x, ok := x.GetKey().(*PrimitiveMap_ReferenceKey); ok {
		return x.ReferenceKey
	}
	return nil
}

func (m *PrimitiveMap) GetValue() isPrimitiveMap_Value {
	if m != nil {
		return m.Value
	}
	return nil
}

func (x *PrimitiveMap) GetPrimitiveValue() *Primitive {
	if x, ok := x.GetValue().(*PrimitiveMap_PrimitiveValue); ok {
		return x.PrimitiveValue
	}
	return nil
}

func (x *PrimitiveMap) GetReferenceValue() *Reference {
	if x, ok := x.GetValue().(*PrimitiveMap_ReferenceValue); ok {
		return x.ReferenceValue
	}
	return nil
}

func (x *PrimitiveMap) GetSimpleListValue() *List {
	if x, ok := x.GetValue().(*PrimitiveMap_SimpleListValue); ok {
		return x.SimpleListValue
	}
	return nil
}

func (x *PrimitiveMap) GetGeneralConstraints() *constraints.General {
	if x != nil {
		return x.GeneralConstraints
	}
	return nil
}

func (x *PrimitiveMap) GetObjectConstraints() *constraints.Object {
	if x != nil {
		return x.ObjectConstraints
	}
	return nil
}

type isPrimitiveMap_Key interface {
	isPrimitiveMap_Key()
}

type PrimitiveMap_PrimitiveKey struct {
	PrimitiveKey *Primitive `protobuf:"bytes,1,opt,name=primitive_key,json=primitiveKey,proto3,oneof"`
}

type PrimitiveMap_ReferenceKey struct {
	ReferenceKey *Reference `protobuf:"bytes,2,opt,name=reference_key,json=referenceKey,proto3,oneof"`
}

func (*PrimitiveMap_PrimitiveKey) isPrimitiveMap_Key() {}

func (*PrimitiveMap_ReferenceKey) isPrimitiveMap_Key() {}

type isPrimitiveMap_Value interface {
	isPrimitiveMap_Value()
}

type PrimitiveMap_PrimitiveValue struct {
	PrimitiveValue *Primitive `protobuf:"bytes,3,opt,name=primitive_value,json=primitiveValue,proto3,oneof"`
}

type PrimitiveMap_ReferenceValue struct {
	ReferenceValue *Reference `protobuf:"bytes,4,opt,name=reference_value,json=referenceValue,proto3,oneof"`
}

type PrimitiveMap_SimpleListValue struct {
	SimpleListValue *List `protobuf:"bytes,5,opt,name=simple_list_value,json=simpleListValue,proto3,oneof"` // must be primitive or primitive reference
}

func (*PrimitiveMap_PrimitiveValue) isPrimitiveMap_Value() {}

func (*PrimitiveMap_ReferenceValue) isPrimitiveMap_Value() {}

func (*PrimitiveMap_SimpleListValue) isPrimitiveMap_Value() {}

type ListMap struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyField           []string             `protobuf:"bytes,1,rep,name=key_field,json=keyField,proto3" json:"key_field,omitempty"`
	Items              *Reference           `protobuf:"bytes,2,opt,name=items,proto3" json:"items,omitempty"`
	GeneralConstraints *constraints.General `protobuf:"bytes,10,opt,name=general_constraints,json=generalConstraints,proto3" json:"general_constraints,omitempty"`
	ListConstraints    *constraints.List    `protobuf:"bytes,11,opt,name=list_constraints,json=listConstraints,proto3" json:"list_constraints,omitempty"`
}

func (x *ListMap) Reset() {
	*x = ListMap{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMap) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMap) ProtoMessage() {}

func (x *ListMap) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMap.ProtoReflect.Descriptor instead.
func (*ListMap) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *ListMap) GetKeyField() []string {
	if x != nil {
		return x.KeyField
	}
	return nil
}

func (x *ListMap) GetItems() *Reference {
	if x != nil {
		return x.Items
	}
	return nil
}

func (x *ListMap) GetGeneralConstraints() *constraints.General {
	if x != nil {
		return x.GeneralConstraints
	}
	return nil
}

func (x *ListMap) GetListConstraints() *constraints.List {
	if x != nil {
		return x.ListConstraints
	}
	return nil
}

type Subtype struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Types that are assignable to Type:
	//	*Subtype_ReferenceAlias
	//	*Subtype_PrimitiveAlias
	//	*Subtype_Union
	//	*Subtype_Struct
	//	*Subtype_Set
	//	*Subtype_List
	//	*Subtype_PrimitiveMap
	//	*Subtype_ListMap
	//	*Subtype_Enum
	Type       isSubtype_Type `protobuf_oneof:"type"`
	Docs       *Documentation `protobuf:"bytes,15,opt,name=docs,proto3" json:"docs,omitempty"`
	Attributes []*any.Any     `protobuf:"bytes,2047,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Subtype) Reset() {
	*x = Subtype{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subtype) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subtype) ProtoMessage() {}

func (x *Subtype) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subtype.ProtoReflect.Descriptor instead.
func (*Subtype) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *Subtype) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (m *Subtype) GetType() isSubtype_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (x *Subtype) GetReferenceAlias() *Reference {
	if x, ok := x.GetType().(*Subtype_ReferenceAlias); ok {
		return x.ReferenceAlias
	}
	return nil
}

func (x *Subtype) GetPrimitiveAlias() *Primitive {
	if x, ok := x.GetType().(*Subtype_PrimitiveAlias); ok {
		return x.PrimitiveAlias
	}
	return nil
}

func (x *Subtype) GetUnion() *Union {
	if x, ok := x.GetType().(*Subtype_Union); ok {
		return x.Union
	}
	return nil
}

func (x *Subtype) GetStruct() *Struct {
	if x, ok := x.GetType().(*Subtype_Struct); ok {
		return x.Struct
	}
	return nil
}

func (x *Subtype) GetSet() *Set {
	if x, ok := x.GetType().(*Subtype_Set); ok {
		return x.Set
	}
	return nil
}

func (x *Subtype) GetList() *List {
	if x, ok := x.GetType().(*Subtype_List); ok {
		return x.List
	}
	return nil
}

func (x *Subtype) GetPrimitiveMap() *PrimitiveMap {
	if x, ok := x.GetType().(*Subtype_PrimitiveMap); ok {
		return x.PrimitiveMap
	}
	return nil
}

func (x *Subtype) GetListMap() *ListMap {
	if x, ok := x.GetType().(*Subtype_ListMap); ok {
		return x.ListMap
	}
	return nil
}

func (x *Subtype) GetEnum() *Enum {
	if x, ok := x.GetType().(*Subtype_Enum); ok {
		return x.Enum
	}
	return nil
}

func (x *Subtype) GetDocs() *Documentation {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Subtype) GetAttributes() []*any.Any {
	if x != nil {
		return x.Attributes
	}
	return nil
}

type isSubtype_Type interface {
	isSubtype_Type()
}

type Subtype_ReferenceAlias struct {
	ReferenceAlias *Reference `protobuf:"bytes,3,opt,name=reference_alias,json=referenceAlias,proto3,oneof"`
}

type Subtype_PrimitiveAlias struct {
	PrimitiveAlias *Primitive `protobuf:"bytes,4,opt,name=primitive_alias,json=primitiveAlias,proto3,oneof"`
}

type Subtype_Union struct {
	Union *Union `protobuf:"bytes,5,opt,name=union,proto3,oneof"`
}

type Subtype_Struct struct {
	Struct *Struct `protobuf:"bytes,6,opt,name=struct,proto3,oneof"`
}

type Subtype_Set struct {
	Set *Set `protobuf:"bytes,7,opt,name=set,proto3,oneof"`
}

type Subtype_List struct {
	List *List `protobuf:"bytes,8,opt,name=list,proto3,oneof"`
}

type Subtype_PrimitiveMap struct {
	PrimitiveMap *PrimitiveMap `protobuf:"bytes,9,opt,name=primitive_map,json=primitiveMap,proto3,oneof"`
}

type Subtype_ListMap struct {
	ListMap *ListMap `protobuf:"bytes,10,opt,name=list_map,json=listMap,proto3,oneof"`
}

type Subtype_Enum struct {
	Enum *Enum `protobuf:"bytes,11,opt,name=enum,proto3,oneof"`
}

func (*Subtype_ReferenceAlias) isSubtype_Type() {}

func (*Subtype_PrimitiveAlias) isSubtype_Type() {}

func (*Subtype_Union) isSubtype_Type() {}

func (*Subtype_Struct) isSubtype_Type() {}

func (*Subtype_Set) isSubtype_Type() {}

func (*Subtype_List) isSubtype_Type() {}

func (*Subtype_PrimitiveMap) isSubtype_Type() {}

func (*Subtype_ListMap) isSubtype_Type() {}

func (*Subtype_Enum) isSubtype_Type() {}

type Enum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Variants []*Enum_Variant `protobuf:"bytes,1,rep,name=variants,proto3" json:"variants,omitempty"` // TODO: constraints?
}

func (x *Enum) Reset() {
	*x = Enum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enum) ProtoMessage() {}

func (x *Enum) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enum.ProtoReflect.Descriptor instead.
func (*Enum) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *Enum) GetVariants() []*Enum_Variant {
	if x != nil {
		return x.Variants
	}
	return nil
}

type Enum_Variant struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name       string         `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Docs       *Documentation `protobuf:"bytes,15,opt,name=docs,proto3" json:"docs,omitempty"`
	Attributes []*any.Any     `protobuf:"bytes,2047,rep,name=attributes,proto3" json:"attributes,omitempty"`
}

func (x *Enum_Variant) Reset() {
	*x = Enum_Variant{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Enum_Variant) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Enum_Variant) ProtoMessage() {}

func (x *Enum_Variant) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Enum_Variant.ProtoReflect.Descriptor instead.
func (*Enum_Variant) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13, 0}
}

func (x *Enum_Variant) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Enum_Variant) GetDocs() *Documentation {
	if x != nil {
		return x.Docs
	}
	return nil
}

func (x *Enum_Variant) GetAttributes() []*any.Any {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x6b,
	0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61, 0x6e, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x11, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x6e, 0x0a, 0x0d, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x78, 0x61,
	0x6d, 0x70, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x78, 0x61, 0x6d,
	0x70, 0x6c, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x5f,
	0x72, 0x65, 0x66, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x52, 0x65, 0x66, 0x22, 0x41, 0x0a, 0x0f, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12,
	0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xc5, 0x01, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x2a,
	0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x6f,
	0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0xff, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x22, 0xd7, 0x01, 0x0a, 0x06, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x2a, 0x0a, 0x06,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b,
	0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x52, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x70, 0x72, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x5f, 0x75, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x5f, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x70, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77, 0x6e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x73,
	0x12, 0x2c, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x5f,
	0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x69, 0x73,
	0x45, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x3b,
	0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0b,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xf2, 0x04, 0x0a, 0x05,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x12, 0x2a, 0x0a, 0x11, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x6d, 0x65,
	0x61, 0x6e, 0x73, 0x5f, 0x61, 0x62, 0x73, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0f, 0x7a, 0x65, 0x72, 0x6f, 0x4d, 0x65, 0x61, 0x6e, 0x73, 0x41, 0x62, 0x73, 0x65, 0x6e,
	0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x65, 0x6d, 0x62, 0x65, 0x64, 0x64, 0x65, 0x64, 0x12, 0x36, 0x0a,
	0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50,
	0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69,
	0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24,
	0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x62,
	0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x03, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a,
	0x0d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x31, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x4d,
	0x61, 0x70, 0x12, 0x30, 0x0a, 0x07, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04,
	0x64, 0x6f, 0x63, 0x73, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x74, 0x61,
	0x67, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x61,
	0x67, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x18,
	0xff, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x22, 0xfc, 0x01, 0x0a, 0x05, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x6e,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x75, 0x6e,
	0x74, 0x61, 0x67, 0x67, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x08, 0x76, 0x61, 0x72, 0x69,
	0x61, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x62, 0x2e,
	0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x52, 0x08,
	0x76, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65,
	0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x6f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22,
	0x9c, 0x01, 0x0a, 0x09, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x41, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x66, 0x52, 0x0c, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x38, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69,
	0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x41, 0x6e,
	0x79, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xba,
	0x03, 0x0a, 0x09, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x2f, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x6b, 0x62, 0x2e,
	0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x4b, 0x0a,
	0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61,
	0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e,
	0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4a, 0x0a, 0x12, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x4d, 0x0a, 0x13, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x48,
	0x00, 0x52, 0x12, 0x6e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x7c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x45, 0x47,
	0x41, 0x43, 0x59, 0x49, 0x4e, 0x54, 0x33, 0x32, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e,
	0x54, 0x36, 0x34, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x03, 0x12,
	0x08, 0x0a, 0x04, 0x54, 0x49, 0x4d, 0x45, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x55, 0x52,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x05, 0x12, 0x0c, 0x0a, 0x08, 0x51, 0x55, 0x41, 0x4e, 0x54,
	0x49, 0x54, 0x59, 0x10, 0x06, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x07,
	0x12, 0x11, 0x0a, 0x0d, 0x4c, 0x45, 0x47, 0x41, 0x43, 0x59, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x36,
	0x34, 0x10, 0x08, 0x42, 0x16, 0x0a, 0x14, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x90, 0x02, 0x0a, 0x04,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48,
	0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36, 0x0a, 0x09,
	0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x12, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x62,
	0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x22, 0x8f,
	0x02, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74,
	0x69, 0x76, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69,
	0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76,
	0x65, 0x48, 0x00, 0x52, 0x09, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x36,
	0x0a, 0x09, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x09, 0x72, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x42, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x07, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73,
	0x22, 0xfa, 0x03, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x3d, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x3d, 0x0a, 0x0d, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f, 0x6b, 0x65,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48,
	0x00, 0x52, 0x0c, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x4b, 0x65, 0x79, 0x12,
	0x41, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x48, 0x01, 0x52, 0x0e, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x5f,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62,
	0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x48, 0x01, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x3f, 0x0a, 0x11, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x11, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x48, 0x01, 0x52, 0x0f, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4b, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61,
	0x6c, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52,
	0x12, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x5f, 0x63, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x73, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x11, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x42, 0x05, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x42, 0x07, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe5, 0x01,
	0x0a, 0x07, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6b, 0x65, 0x79,
	0x5f, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6b, 0x65,
	0x79, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x12, 0x2c, 0x0a, 0x05, 0x69, 0x74, 0x65, 0x6d, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x52, 0x05, 0x69,
	0x74, 0x65, 0x6d, 0x73, 0x12, 0x4b, 0x0a, 0x13, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x5f,
	0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e, 0x47, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x52, 0x12, 0x67,
	0x65, 0x6e, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x73, 0x12, 0x42, 0x0a, 0x10, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x6b, 0x62,
	0x2e, 0x69, 0x72, 0x2e, 0x63, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x73, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x0f, 0x6c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x61, 0x69, 0x6e, 0x74, 0x73, 0x22, 0xda, 0x04, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x0f, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16,
	0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x72, 0x65, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x70, 0x72, 0x69, 0x6d,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x50, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x48, 0x00, 0x52, 0x0e, 0x70, 0x72, 0x69,
	0x6d, 0x69, 0x74, 0x69, 0x76, 0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x2a, 0x0a, 0x05, 0x75,
	0x6e, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x6b, 0x62, 0x2e,
	0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x6e, 0x69, 0x6f, 0x6e, 0x48, 0x00,
	0x52, 0x05, 0x75, 0x6e, 0x69, 0x6f, 0x6e, 0x12, 0x2d, 0x0a, 0x06, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x12, 0x24, 0x0a, 0x03, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x74, 0x48, 0x00, 0x52, 0x03, 0x73, 0x65, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x62, 0x2e,
	0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0d, 0x70, 0x72, 0x69, 0x6d, 0x69, 0x74, 0x69,
	0x76, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x6b,
	0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x31, 0x0a, 0x08, 0x6c, 0x69, 0x73, 0x74, 0x5f,
	0x6d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x62, 0x2e, 0x69,
	0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x48,
	0x00, 0x52, 0x07, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x61, 0x70, 0x12, 0x27, 0x0a, 0x04, 0x65, 0x6e,
	0x75, 0x6d, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d, 0x48, 0x00, 0x52, 0x04, 0x65,
	0x6e, 0x75, 0x6d, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x44, 0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64,
	0x6f, 0x63, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65,
	0x73, 0x18, 0xff, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a,
	0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0xc4, 0x01, 0x0a, 0x04, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x35, 0x0a, 0x08, 0x76,
	0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x6e, 0x75, 0x6d,
	0x2e, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x52, 0x08, 0x76, 0x61, 0x72, 0x69, 0x61, 0x6e,
	0x74, 0x73, 0x1a, 0x84, 0x01, 0x0a, 0x07, 0x56, 0x61, 0x72, 0x69, 0x61, 0x6e, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x64, 0x6f, 0x63, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x6b, 0x62, 0x2e, 0x69, 0x72, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44,
	0x6f, 0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x04, 0x64, 0x6f,
	0x63, 0x73, 0x12, 0x35, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73,
	0x18, 0xff, 0x0f, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x0a, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x42, 0x1f, 0x5a, 0x1d, 0x6b, 0x38, 0x73,
	0x2e, 0x69, 0x6f, 0x2f, 0x69, 0x64, 0x6c, 0x2f, 0x63, 0x6b, 0x64, 0x6c, 0x2d, 0x69, 0x72, 0x2f,
	0x67, 0x6f, 0x69, 0x72, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 15)
var file_types_proto_goTypes = []interface{}{
	(Primitive_Type)(0),         // 0: kb.ir.types.Primitive.Type
	(*Documentation)(nil),       // 1: kb.ir.types.Documentation
	(*GroupVersionRef)(nil),     // 2: kb.ir.types.GroupVersionRef
	(*Kind)(nil),                // 3: kb.ir.types.Kind
	(*Struct)(nil),              // 4: kb.ir.types.Struct
	(*Field)(nil),               // 5: kb.ir.types.Field
	(*Union)(nil),               // 6: kb.ir.types.Union
	(*Reference)(nil),           // 7: kb.ir.types.Reference
	(*Primitive)(nil),           // 8: kb.ir.types.Primitive
	(*List)(nil),                // 9: kb.ir.types.List
	(*Set)(nil),                 // 10: kb.ir.types.Set
	(*PrimitiveMap)(nil),        // 11: kb.ir.types.PrimitiveMap
	(*ListMap)(nil),             // 12: kb.ir.types.ListMap
	(*Subtype)(nil),             // 13: kb.ir.types.Subtype
	(*Enum)(nil),                // 14: kb.ir.types.Enum
	(*Enum_Variant)(nil),        // 15: kb.ir.types.Enum.Variant
	(*any.Any)(nil),             // 16: google.protobuf.Any
	(*constraints.Object)(nil),  // 17: kb.ir.constraints.Object
	(*_struct.Value)(nil),       // 18: google.protobuf.Value
	(*constraints.General)(nil), // 19: kb.ir.constraints.General
	(*constraints.Any)(nil),     // 20: kb.ir.constraints.Any
	(*constraints.String)(nil),  // 21: kb.ir.constraints.String
	(*constraints.Numeric)(nil), // 22: kb.ir.constraints.Numeric
	(*constraints.List)(nil),    // 23: kb.ir.constraints.List
}
var file_types_proto_depIdxs = []int32{
	5,  // 0: kb.ir.types.Kind.fields:type_name -> kb.ir.types.Field
	1,  // 1: kb.ir.types.Kind.docs:type_name -> kb.ir.types.Documentation
	16, // 2: kb.ir.types.Kind.attributes:type_name -> google.protobuf.Any
	5,  // 3: kb.ir.types.Struct.fields:type_name -> kb.ir.types.Field
	17, // 4: kb.ir.types.Struct.constraints:type_name -> kb.ir.constraints.Object
	8,  // 5: kb.ir.types.Field.primitive:type_name -> kb.ir.types.Primitive
	7,  // 6: kb.ir.types.Field.named_type:type_name -> kb.ir.types.Reference
	10, // 7: kb.ir.types.Field.set:type_name -> kb.ir.types.Set
	9,  // 8: kb.ir.types.Field.list:type_name -> kb.ir.types.List
	11, // 9: kb.ir.types.Field.primitive_map:type_name -> kb.ir.types.PrimitiveMap
	12, // 10: kb.ir.types.Field.list_map:type_name -> kb.ir.types.ListMap
	18, // 11: kb.ir.types.Field.default:type_name -> google.protobuf.Value
	1,  // 12: kb.ir.types.Field.docs:type_name -> kb.ir.types.Documentation
	16, // 13: kb.ir.types.Field.attributes:type_name -> google.protobuf.Any
	5,  // 14: kb.ir.types.Union.variants:type_name -> kb.ir.types.Field
	19, // 15: kb.ir.types.Union.general_constraints:type_name -> kb.ir.constraints.General
	17, // 16: kb.ir.types.Union.object_constraints:type_name -> kb.ir.constraints.Object
	2,  // 17: kb.ir.types.Reference.group_version:type_name -> kb.ir.types.GroupVersionRef
	20, // 18: kb.ir.types.Reference.constraints:type_name -> kb.ir.constraints.Any
	0,  // 19: kb.ir.types.Primitive.type:type_name -> kb.ir.types.Primitive.Type
	19, // 20: kb.ir.types.Primitive.general_constraints:type_name -> kb.ir.constraints.General
	21, // 21: kb.ir.types.Primitive.string_constraints:type_name -> kb.ir.constraints.String
	22, // 22: kb.ir.types.Primitive.numeric_constraints:type_name -> kb.ir.constraints.Numeric
	8,  // 23: kb.ir.types.List.primitive:type_name -> kb.ir.types.Primitive
	7,  // 24: kb.ir.types.List.reference:type_name -> kb.ir.types.Reference
	19, // 25: kb.ir.types.List.general_constraints:type_name -> kb.ir.constraints.General
	23, // 26: kb.ir.types.List.list_constraints:type_name -> kb.ir.constraints.List
	8,  // 27: kb.ir.types.Set.primitive:type_name -> kb.ir.types.Primitive
	7,  // 28: kb.ir.types.Set.reference:type_name -> kb.ir.types.Reference
	19, // 29: kb.ir.types.Set.general_constraints:type_name -> kb.ir.constraints.General
	23, // 30: kb.ir.types.Set.list_constraints:type_name -> kb.ir.constraints.List
	8,  // 31: kb.ir.types.PrimitiveMap.primitive_key:type_name -> kb.ir.types.Primitive
	7,  // 32: kb.ir.types.PrimitiveMap.reference_key:type_name -> kb.ir.types.Reference
	8,  // 33: kb.ir.types.PrimitiveMap.primitive_value:type_name -> kb.ir.types.Primitive
	7,  // 34: kb.ir.types.PrimitiveMap.reference_value:type_name -> kb.ir.types.Reference
	9,  // 35: kb.ir.types.PrimitiveMap.simple_list_value:type_name -> kb.ir.types.List
	19, // 36: kb.ir.types.PrimitiveMap.general_constraints:type_name -> kb.ir.constraints.General
	17, // 37: kb.ir.types.PrimitiveMap.object_constraints:type_name -> kb.ir.constraints.Object
	7,  // 38: kb.ir.types.ListMap.items:type_name -> kb.ir.types.Reference
	19, // 39: kb.ir.types.ListMap.general_constraints:type_name -> kb.ir.constraints.General
	23, // 40: kb.ir.types.ListMap.list_constraints:type_name -> kb.ir.constraints.List
	7,  // 41: kb.ir.types.Subtype.reference_alias:type_name -> kb.ir.types.Reference
	8,  // 42: kb.ir.types.Subtype.primitive_alias:type_name -> kb.ir.types.Primitive
	6,  // 43: kb.ir.types.Subtype.union:type_name -> kb.ir.types.Union
	4,  // 44: kb.ir.types.Subtype.struct:type_name -> kb.ir.types.Struct
	10, // 45: kb.ir.types.Subtype.set:type_name -> kb.ir.types.Set
	9,  // 46: kb.ir.types.Subtype.list:type_name -> kb.ir.types.List
	11, // 47: kb.ir.types.Subtype.primitive_map:type_name -> kb.ir.types.PrimitiveMap
	12, // 48: kb.ir.types.Subtype.list_map:type_name -> kb.ir.types.ListMap
	14, // 49: kb.ir.types.Subtype.enum:type_name -> kb.ir.types.Enum
	1,  // 50: kb.ir.types.Subtype.docs:type_name -> kb.ir.types.Documentation
	16, // 51: kb.ir.types.Subtype.attributes:type_name -> google.protobuf.Any
	15, // 52: kb.ir.types.Enum.variants:type_name -> kb.ir.types.Enum.Variant
	1,  // 53: kb.ir.types.Enum.Variant.docs:type_name -> kb.ir.types.Documentation
	16, // 54: kb.ir.types.Enum.Variant.attributes:type_name -> google.protobuf.Any
	55, // [55:55] is the sub-list for method output_type
	55, // [55:55] is the sub-list for method input_type
	55, // [55:55] is the sub-list for extension type_name
	55, // [55:55] is the sub-list for extension extendee
	0,  // [0:55] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Documentation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GroupVersionRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Kind); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Struct); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Field); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Union); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Reference); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Primitive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*List); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Set); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PrimitiveMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMap); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subtype); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Enum_Variant); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_types_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*Field_Primitive)(nil),
		(*Field_NamedType)(nil),
		(*Field_Set)(nil),
		(*Field_List)(nil),
		(*Field_PrimitiveMap)(nil),
		(*Field_ListMap)(nil),
	}
	file_types_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*Primitive_StringConstraints)(nil),
		(*Primitive_NumericConstraints)(nil),
	}
	file_types_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*List_Primitive)(nil),
		(*List_Reference)(nil),
	}
	file_types_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*Set_Primitive)(nil),
		(*Set_Reference)(nil),
	}
	file_types_proto_msgTypes[10].OneofWrappers = []interface{}{
		(*PrimitiveMap_PrimitiveKey)(nil),
		(*PrimitiveMap_ReferenceKey)(nil),
		(*PrimitiveMap_PrimitiveValue)(nil),
		(*PrimitiveMap_ReferenceValue)(nil),
		(*PrimitiveMap_SimpleListValue)(nil),
	}
	file_types_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*Subtype_ReferenceAlias)(nil),
		(*Subtype_PrimitiveAlias)(nil),
		(*Subtype_Union)(nil),
		(*Subtype_Struct)(nil),
		(*Subtype_Set)(nil),
		(*Subtype_List)(nil),
		(*Subtype_PrimitiveMap)(nil),
		(*Subtype_ListMap)(nil),
		(*Subtype_Enum)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   15,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
